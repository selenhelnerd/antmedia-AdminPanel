/* tslint:disable */
/* eslint-disable */
/**
 * Ant Media Server REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';


/**
 * ClusterDeleteNodeIdApi - axios parameter creator
 * @export
 */
export const ClusterDeleteNodeIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete Node
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterDeleteNodeIdGet: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clusterDeleteNodeIdGet', 'id', id)
            const localVarPath = `/cluster/deleteNode/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClusterDeleteNodeIdApi - functional programming interface
 * @export
 */
export const ClusterDeleteNodeIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClusterDeleteNodeIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete Node
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clusterDeleteNodeIdGet(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clusterDeleteNodeIdGet(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClusterDeleteNodeIdApi.clusterDeleteNodeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClusterDeleteNodeIdApi - factory interface
 * @export
 */
export const ClusterDeleteNodeIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClusterDeleteNodeIdApiFp(configuration)
    return {
        /**
         * 
         * @summary delete Node
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterDeleteNodeIdGet(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.clusterDeleteNodeIdGet(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClusterDeleteNodeIdApi - object-oriented interface
 * @export
 * @class ClusterDeleteNodeIdApi
 * @extends {BaseAPI}
 */
export class ClusterDeleteNodeIdApi extends BaseAPI {
    /**
     * 
     * @summary delete Node
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterDeleteNodeIdApi
     */
    public clusterDeleteNodeIdGet(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return ClusterDeleteNodeIdApiFp(this.configuration).clusterDeleteNodeIdGet(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClusterNodeCountApi - axios parameter creator
 * @export
 */
export const ClusterNodeCountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get Node Count
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterNodeCountGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cluster/node-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClusterNodeCountApi - functional programming interface
 * @export
 */
export const ClusterNodeCountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClusterNodeCountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get Node Count
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clusterNodeCountGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clusterNodeCountGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClusterNodeCountApi.clusterNodeCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClusterNodeCountApi - factory interface
 * @export
 */
export const ClusterNodeCountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClusterNodeCountApiFp(configuration)
    return {
        /**
         * 
         * @summary get Node Count
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterNodeCountGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.clusterNodeCountGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClusterNodeCountApi - object-oriented interface
 * @export
 * @class ClusterNodeCountApi
 * @extends {BaseAPI}
 */
export class ClusterNodeCountApi extends BaseAPI {
    /**
     * 
     * @summary get Node Count
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterNodeCountApi
     */
    public clusterNodeCountGet(accept?: string, options?: RawAxiosRequestConfig) {
        return ClusterNodeCountApiFp(this.configuration).clusterNodeCountGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClusterNodesOffsetSizeApi - axios parameter creator
 * @export
 */
export const ClusterNodesOffsetSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get Node List
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterNodesOffsetSizeGet: async (offset: string, size: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('clusterNodesOffsetSizeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('clusterNodesOffsetSizeGet', 'size', size)
            const localVarPath = `/cluster/nodes/{offset}/{size}`
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClusterNodesOffsetSizeApi - functional programming interface
 * @export
 */
export const ClusterNodesOffsetSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClusterNodesOffsetSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get Node List
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clusterNodesOffsetSizeGet(offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clusterNodesOffsetSizeGet(offset, size, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClusterNodesOffsetSizeApi.clusterNodesOffsetSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClusterNodesOffsetSizeApi - factory interface
 * @export
 */
export const ClusterNodesOffsetSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClusterNodesOffsetSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary get Node List
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clusterNodesOffsetSizeGet(offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.clusterNodesOffsetSizeGet(offset, size, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClusterNodesOffsetSizeApi - object-oriented interface
 * @export
 * @class ClusterNodesOffsetSizeApi
 * @extends {BaseAPI}
 */
export class ClusterNodesOffsetSizeApi extends BaseAPI {
    /**
     * 
     * @summary get Node List
     * @param {string} offset 
     * @param {string} size 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterNodesOffsetSizeApi
     */
    public clusterNodesOffsetSizeGet(offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig) {
        return ClusterNodesOffsetSizeApiFp(this.configuration).clusterNodesOffsetSizeGet(offset, size, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2AdminStatusApi - axios parameter creator
 * @export
 */
export const V2AdminStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns whether current user is admin or not. If user is admin, it can call POST/PUT/DELETE methods
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2AdminStatusGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/admin-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2AdminStatusApi - functional programming interface
 * @export
 */
export const V2AdminStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2AdminStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns whether current user is admin or not. If user is admin, it can call POST/PUT/DELETE methods
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2AdminStatusGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2AdminStatusGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2AdminStatusApi.v2AdminStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2AdminStatusApi - factory interface
 * @export
 */
export const V2AdminStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2AdminStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns whether current user is admin or not. If user is admin, it can call POST/PUT/DELETE methods
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2AdminStatusGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2AdminStatusGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2AdminStatusApi - object-oriented interface
 * @export
 * @class V2AdminStatusApi
 * @extends {BaseAPI}
 */
export class V2AdminStatusApi extends BaseAPI {
    /**
     * 
     * @summary Returns whether current user is admin or not. If user is admin, it can call POST/PUT/DELETE methods
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2AdminStatusApi
     */
    public v2AdminStatusGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2AdminStatusApiFp(this.configuration).v2AdminStatusGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ApplicationsApi - axios parameter creator
 * @export
 */
export const V2ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the applications in the server. Returns the name of the applications in JSON format.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ApplicationsApi - functional programming interface
 * @export
 */
export const V2ApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the applications in the server. Returns the name of the applications in JSON format.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ApplicationsGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ApplicationsGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ApplicationsApi.v2ApplicationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ApplicationsApi - factory interface
 * @export
 */
export const V2ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ApplicationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the applications in the server. Returns the name of the applications in JSON format.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ApplicationsGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ApplicationsApi - object-oriented interface
 * @export
 * @class V2ApplicationsApi
 * @extends {BaseAPI}
 */
export class V2ApplicationsApi extends BaseAPI {
    /**
     * 
     * @summary Gets the applications in the server. Returns the name of the applications in JSON format.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApplicationsApi
     */
    public v2ApplicationsGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2ApplicationsApiFp(this.configuration).v2ApplicationsGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ApplicationsAppNameApi - axios parameter creator
 * @export
 */
export const V2ApplicationsAppNameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes application with the given name.
         * @param {string} appName 
         * @param {string} [accept] 
         * @param {string} [deleteDB] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsAppNameDelete: async (appName: string, accept?: string, deleteDB?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('v2ApplicationsAppNameDelete', 'appName', appName)
            const localVarPath = `/v2/applications/{appName}`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deleteDB !== undefined) {
                localVarQueryParameter['deleteDB'] = deleteDB;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new application with given name. It just creates default app
         * @param {string} appName 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsAppNamePost: async (appName: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('v2ApplicationsAppNamePost', 'appName', appName)
            const localVarPath = `/v2/applications/{appName}`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new application with given name. It supports uploading custom WAR files
         * @param {string} appName 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsAppNamePut: async (appName: string, contentType?: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appName' is not null or undefined
            assertParamExists('v2ApplicationsAppNamePut', 'appName', appName)
            const localVarPath = `/v2/applications/{appName}`
                .replace(`{${"appName"}}`, encodeURIComponent(String(appName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ApplicationsAppNameApi - functional programming interface
 * @export
 */
export const V2ApplicationsAppNameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ApplicationsAppNameApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes application with the given name.
         * @param {string} appName 
         * @param {string} [accept] 
         * @param {string} [deleteDB] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ApplicationsAppNameDelete(appName: string, accept?: string, deleteDB?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ApplicationsAppNameDelete(appName, accept, deleteDB, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ApplicationsAppNameApi.v2ApplicationsAppNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a new application with given name. It just creates default app
         * @param {string} appName 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ApplicationsAppNamePost(appName: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ApplicationsAppNamePost(appName, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ApplicationsAppNameApi.v2ApplicationsAppNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a new application with given name. It supports uploading custom WAR files
         * @param {string} appName 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ApplicationsAppNamePut(appName: string, contentType?: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ApplicationsAppNamePut(appName, contentType, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ApplicationsAppNameApi.v2ApplicationsAppNamePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ApplicationsAppNameApi - factory interface
 * @export
 */
export const V2ApplicationsAppNameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ApplicationsAppNameApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes application with the given name.
         * @param {string} appName 
         * @param {string} [accept] 
         * @param {string} [deleteDB] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsAppNameDelete(appName: string, accept?: string, deleteDB?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ApplicationsAppNameDelete(appName, accept, deleteDB, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new application with given name. It just creates default app
         * @param {string} appName 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsAppNamePost(appName: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ApplicationsAppNamePost(appName, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new application with given name. It supports uploading custom WAR files
         * @param {string} appName 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsAppNamePut(appName: string, contentType?: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ApplicationsAppNamePut(appName, contentType, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ApplicationsAppNameApi - object-oriented interface
 * @export
 * @class V2ApplicationsAppNameApi
 * @extends {BaseAPI}
 */
export class V2ApplicationsAppNameApi extends BaseAPI {
    /**
     * 
     * @summary Deletes application with the given name.
     * @param {string} appName 
     * @param {string} [accept] 
     * @param {string} [deleteDB] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApplicationsAppNameApi
     */
    public v2ApplicationsAppNameDelete(appName: string, accept?: string, deleteDB?: string, options?: RawAxiosRequestConfig) {
        return V2ApplicationsAppNameApiFp(this.configuration).v2ApplicationsAppNameDelete(appName, accept, deleteDB, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new application with given name. It just creates default app
     * @param {string} appName 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApplicationsAppNameApi
     */
    public v2ApplicationsAppNamePost(appName: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2ApplicationsAppNameApiFp(this.configuration).v2ApplicationsAppNamePost(appName, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new application with given name. It supports uploading custom WAR files
     * @param {string} appName 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApplicationsAppNameApi
     */
    public v2ApplicationsAppNamePut(appName: string, contentType?: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2ApplicationsAppNameApiFp(this.configuration).v2ApplicationsAppNamePut(appName, contentType, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ApplicationsAppnameResetApi - axios parameter creator
 * @export
 */
export const V2ApplicationsAppnameResetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Resets the viewer counts and broadcasts statuses in the db. This can be used after server crashes to recover db. It\'s not intended to use to ignore the crash.
         * @param {string} appname 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsAppnameResetPost: async (appname: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appname' is not null or undefined
            assertParamExists('v2ApplicationsAppnameResetPost', 'appname', appname)
            const localVarPath = `/v2/applications/{appname}/reset`
                .replace(`{${"appname"}}`, encodeURIComponent(String(appname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ApplicationsAppnameResetApi - functional programming interface
 * @export
 */
export const V2ApplicationsAppnameResetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ApplicationsAppnameResetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Resets the viewer counts and broadcasts statuses in the db. This can be used after server crashes to recover db. It\'s not intended to use to ignore the crash.
         * @param {string} appname 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ApplicationsAppnameResetPost(appname: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ApplicationsAppnameResetPost(appname, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ApplicationsAppnameResetApi.v2ApplicationsAppnameResetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ApplicationsAppnameResetApi - factory interface
 * @export
 */
export const V2ApplicationsAppnameResetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ApplicationsAppnameResetApiFp(configuration)
    return {
        /**
         * 
         * @summary Resets the viewer counts and broadcasts statuses in the db. This can be used after server crashes to recover db. It\'s not intended to use to ignore the crash.
         * @param {string} appname 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsAppnameResetPost(appname: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ApplicationsAppnameResetPost(appname, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ApplicationsAppnameResetApi - object-oriented interface
 * @export
 * @class V2ApplicationsAppnameResetApi
 * @extends {BaseAPI}
 */
export class V2ApplicationsAppnameResetApi extends BaseAPI {
    /**
     * 
     * @summary Resets the viewer counts and broadcasts statuses in the db. This can be used after server crashes to recover db. It\'s not intended to use to ignore the crash.
     * @param {string} appname 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApplicationsAppnameResetApi
     */
    public v2ApplicationsAppnameResetPost(appname: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2ApplicationsAppnameResetApiFp(this.configuration).v2ApplicationsAppnameResetPost(appname, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ApplicationsInfoApi - axios parameter creator
 * @export
 */
export const V2ApplicationsInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets application info. Application info includes live stream count, vod count and application name.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsInfoGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/applications-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ApplicationsInfoApi - functional programming interface
 * @export
 */
export const V2ApplicationsInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ApplicationsInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets application info. Application info includes live stream count, vod count and application name.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ApplicationsInfoGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ApplicationsInfoGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ApplicationsInfoApi.v2ApplicationsInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ApplicationsInfoApi - factory interface
 * @export
 */
export const V2ApplicationsInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ApplicationsInfoApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets application info. Application info includes live stream count, vod count and application name.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsInfoGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ApplicationsInfoGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ApplicationsInfoApi - object-oriented interface
 * @export
 * @class V2ApplicationsInfoApi
 * @extends {BaseAPI}
 */
export class V2ApplicationsInfoApi extends BaseAPI {
    /**
     * 
     * @summary Gets application info. Application info includes live stream count, vod count and application name.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApplicationsInfoApi
     */
    public v2ApplicationsInfoGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2ApplicationsInfoApiFp(this.configuration).v2ApplicationsInfoGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ApplicationsLiveStreamsAppnameApi - axios parameter creator
 * @export
 */
export const V2ApplicationsLiveStreamsAppnameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns live streams in the specified application. Retrieves broadcast names and the consumer size.
         * @param {string} appname 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsLiveStreamsAppnameGet: async (appname: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appname' is not null or undefined
            assertParamExists('v2ApplicationsLiveStreamsAppnameGet', 'appname', appname)
            const localVarPath = `/v2/applications/live-streams/{appname}`
                .replace(`{${"appname"}}`, encodeURIComponent(String(appname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ApplicationsLiveStreamsAppnameApi - functional programming interface
 * @export
 */
export const V2ApplicationsLiveStreamsAppnameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ApplicationsLiveStreamsAppnameApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns live streams in the specified application. Retrieves broadcast names and the consumer size.
         * @param {string} appname 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ApplicationsLiveStreamsAppnameGet(appname: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ApplicationsLiveStreamsAppnameGet(appname, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ApplicationsLiveStreamsAppnameApi.v2ApplicationsLiveStreamsAppnameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ApplicationsLiveStreamsAppnameApi - factory interface
 * @export
 */
export const V2ApplicationsLiveStreamsAppnameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ApplicationsLiveStreamsAppnameApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns live streams in the specified application. Retrieves broadcast names and the consumer size.
         * @param {string} appname 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsLiveStreamsAppnameGet(appname: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ApplicationsLiveStreamsAppnameGet(appname, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ApplicationsLiveStreamsAppnameApi - object-oriented interface
 * @export
 * @class V2ApplicationsLiveStreamsAppnameApi
 * @extends {BaseAPI}
 */
export class V2ApplicationsLiveStreamsAppnameApi extends BaseAPI {
    /**
     * 
     * @summary Returns live streams in the specified application. Retrieves broadcast names and the consumer size.
     * @param {string} appname 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApplicationsLiveStreamsAppnameApi
     */
    public v2ApplicationsLiveStreamsAppnameGet(appname: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2ApplicationsLiveStreamsAppnameApiFp(this.configuration).v2ApplicationsLiveStreamsAppnameGet(appname, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ApplicationsSettingsAppnameApi - axios parameter creator
 * @export
 */
export const V2ApplicationsSettingsAppnameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the specified application settings
         * @param {string} appname 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsSettingsAppnameGet: async (appname: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appname' is not null or undefined
            assertParamExists('v2ApplicationsSettingsAppnameGet', 'appname', appname)
            const localVarPath = `/v2/applications/settings/{appname}`
                .replace(`{${"appname"}}`, encodeURIComponent(String(appname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Changes the application settings with the given settings. Null fields will be set to default values.
         * @param {string} appname 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsSettingsAppnamePost: async (appname: string, contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appname' is not null or undefined
            assertParamExists('v2ApplicationsSettingsAppnamePost', 'appname', appname)
            const localVarPath = `/v2/applications/settings/{appname}`
                .replace(`{${"appname"}}`, encodeURIComponent(String(appname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ApplicationsSettingsAppnameApi - functional programming interface
 * @export
 */
export const V2ApplicationsSettingsAppnameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ApplicationsSettingsAppnameApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the specified application settings
         * @param {string} appname 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ApplicationsSettingsAppnameGet(appname: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ApplicationsSettingsAppnameGet(appname, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ApplicationsSettingsAppnameApi.v2ApplicationsSettingsAppnameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Changes the application settings with the given settings. Null fields will be set to default values.
         * @param {string} appname 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ApplicationsSettingsAppnamePost(appname: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ApplicationsSettingsAppnamePost(appname, contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ApplicationsSettingsAppnameApi.v2ApplicationsSettingsAppnamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ApplicationsSettingsAppnameApi - factory interface
 * @export
 */
export const V2ApplicationsSettingsAppnameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ApplicationsSettingsAppnameApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the specified application settings
         * @param {string} appname 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsSettingsAppnameGet(appname: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ApplicationsSettingsAppnameGet(appname, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Changes the application settings with the given settings. Null fields will be set to default values.
         * @param {string} appname 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ApplicationsSettingsAppnamePost(appname: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ApplicationsSettingsAppnamePost(appname, contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ApplicationsSettingsAppnameApi - object-oriented interface
 * @export
 * @class V2ApplicationsSettingsAppnameApi
 * @extends {BaseAPI}
 */
export class V2ApplicationsSettingsAppnameApi extends BaseAPI {
    /**
     * 
     * @summary Returns the specified application settings
     * @param {string} appname 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApplicationsSettingsAppnameApi
     */
    public v2ApplicationsSettingsAppnameGet(appname: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2ApplicationsSettingsAppnameApiFp(this.configuration).v2ApplicationsSettingsAppnameGet(appname, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Changes the application settings with the given settings. Null fields will be set to default values.
     * @param {string} appname 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ApplicationsSettingsAppnameApi
     */
    public v2ApplicationsSettingsAppnamePost(appname: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2ApplicationsSettingsAppnameApiFp(this.configuration).v2ApplicationsSettingsAppnamePost(appname, contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2AuthenticationStatusApi - axios parameter creator
 * @export
 */
export const V2AuthenticationStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns true if user is authenticated to call rest api operations.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2AuthenticationStatusGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/authentication-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2AuthenticationStatusApi - functional programming interface
 * @export
 */
export const V2AuthenticationStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2AuthenticationStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns true if user is authenticated to call rest api operations.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2AuthenticationStatusGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2AuthenticationStatusGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2AuthenticationStatusApi.v2AuthenticationStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2AuthenticationStatusApi - factory interface
 * @export
 */
export const V2AuthenticationStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2AuthenticationStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns true if user is authenticated to call rest api operations.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2AuthenticationStatusGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2AuthenticationStatusGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2AuthenticationStatusApi - object-oriented interface
 * @export
 * @class V2AuthenticationStatusApi
 * @extends {BaseAPI}
 */
export class V2AuthenticationStatusApi extends BaseAPI {
    /**
     * 
     * @summary Returns true if user is authenticated to call rest api operations.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2AuthenticationStatusApi
     */
    public v2AuthenticationStatusGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2AuthenticationStatusApiFp(this.configuration).v2AuthenticationStatusGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsActiveLiveStreamCountApi - axios parameter creator
 * @export
 */
export const V2BroadcastsActiveLiveStreamCountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return the active live streams
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsActiveLiveStreamCountGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/broadcasts/active-live-stream-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsActiveLiveStreamCountApi - functional programming interface
 * @export
 */
export const V2BroadcastsActiveLiveStreamCountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsActiveLiveStreamCountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Return the active live streams
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsActiveLiveStreamCountGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsActiveLiveStreamCountGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsActiveLiveStreamCountApi.v2BroadcastsActiveLiveStreamCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsActiveLiveStreamCountApi - factory interface
 * @export
 */
export const V2BroadcastsActiveLiveStreamCountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsActiveLiveStreamCountApiFp(configuration)
    return {
        /**
         * 
         * @summary Return the active live streams
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsActiveLiveStreamCountGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsActiveLiveStreamCountGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsActiveLiveStreamCountApi - object-oriented interface
 * @export
 * @class V2BroadcastsActiveLiveStreamCountApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsActiveLiveStreamCountApi extends BaseAPI {
    /**
     * 
     * @summary Return the active live streams
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsActiveLiveStreamCountApi
     */
    public v2BroadcastsActiveLiveStreamCountGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsActiveLiveStreamCountApiFp(this.configuration).v2BroadcastsActiveLiveStreamCountGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsBulkApi - axios parameter creator
 * @export
 */
export const V2BroadcastsBulkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete multiple broadcasts from data store and stop if they are broadcasting
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsBulkDelete: async (contentType?: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/broadcasts/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsBulkApi - functional programming interface
 * @export
 */
export const V2BroadcastsBulkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsBulkApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete multiple broadcasts from data store and stop if they are broadcasting
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsBulkDelete(contentType?: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsBulkDelete(contentType, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsBulkApi.v2BroadcastsBulkDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsBulkApi - factory interface
 * @export
 */
export const V2BroadcastsBulkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsBulkApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete multiple broadcasts from data store and stop if they are broadcasting
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsBulkDelete(contentType?: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsBulkDelete(contentType, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsBulkApi - object-oriented interface
 * @export
 * @class V2BroadcastsBulkApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsBulkApi extends BaseAPI {
    /**
     * 
     * @summary Delete multiple broadcasts from data store and stop if they are broadcasting
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsBulkApi
     */
    public v2BroadcastsBulkDelete(contentType?: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsBulkApiFp(this.configuration).v2BroadcastsBulkDelete(contentType, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsConferenceRoomsApi - axios parameter creator
 * @export
 */
export const V2BroadcastsConferenceRoomsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a conference room with the parameters. The room name is key so if this is called with the same room name then new room is overwritten to old one
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsPost: async (contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/broadcasts/conference-rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsApi - functional programming interface
 * @export
 */
export const V2BroadcastsConferenceRoomsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsConferenceRoomsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a conference room with the parameters. The room name is key so if this is called with the same room name then new room is overwritten to old one
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsConferenceRoomsPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsConferenceRoomsPost(contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsConferenceRoomsApi.v2BroadcastsConferenceRoomsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsApi - factory interface
 * @export
 */
export const V2BroadcastsConferenceRoomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsConferenceRoomsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a conference room with the parameters. The room name is key so if this is called with the same room name then new room is overwritten to old one
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsConferenceRoomsPost(contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsConferenceRoomsApi - object-oriented interface
 * @export
 * @class V2BroadcastsConferenceRoomsApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsConferenceRoomsApi extends BaseAPI {
    /**
     * 
     * @summary Creates a conference room with the parameters. The room name is key so if this is called with the same room name then new room is overwritten to old one
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsConferenceRoomsApi
     */
    public v2BroadcastsConferenceRoomsPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2BroadcastsConferenceRoomsApiFp(this.configuration).v2BroadcastsConferenceRoomsPost(contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsConferenceRoomsListOffsetSizeApi - axios parameter creator
 * @export
 */
export const V2BroadcastsConferenceRoomsListOffsetSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the conference room list from database
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [sortBy] field to sort
         * @param {string} [orderBy] asc for Ascending, desc Descending order
         * @param {string} [search] Search parameter, returns specific items that contains search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsListOffsetSizeGet: async (offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsListOffsetSizeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsListOffsetSizeGet', 'size', size)
            const localVarPath = `/v2/broadcasts/conference-rooms/list/{offset}/{size}`
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsListOffsetSizeApi - functional programming interface
 * @export
 */
export const V2BroadcastsConferenceRoomsListOffsetSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsConferenceRoomsListOffsetSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the conference room list from database
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [sortBy] field to sort
         * @param {string} [orderBy] asc for Ascending, desc Descending order
         * @param {string} [search] Search parameter, returns specific items that contains search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsConferenceRoomsListOffsetSizeGet(offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsConferenceRoomsListOffsetSizeGet(offset, size, accept, sortBy, orderBy, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsConferenceRoomsListOffsetSizeApi.v2BroadcastsConferenceRoomsListOffsetSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsListOffsetSizeApi - factory interface
 * @export
 */
export const V2BroadcastsConferenceRoomsListOffsetSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsConferenceRoomsListOffsetSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the conference room list from database
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [sortBy] field to sort
         * @param {string} [orderBy] asc for Ascending, desc Descending order
         * @param {string} [search] Search parameter, returns specific items that contains search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsListOffsetSizeGet(offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsConferenceRoomsListOffsetSizeGet(offset, size, accept, sortBy, orderBy, search, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsConferenceRoomsListOffsetSizeApi - object-oriented interface
 * @export
 * @class V2BroadcastsConferenceRoomsListOffsetSizeApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsConferenceRoomsListOffsetSizeApi extends BaseAPI {
    /**
     * 
     * @summary Gets the conference room list from database
     * @param {string} offset 
     * @param {string} size 
     * @param {string} [accept] 
     * @param {string} [sortBy] field to sort
     * @param {string} [orderBy] asc for Ascending, desc Descending order
     * @param {string} [search] Search parameter, returns specific items that contains search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsConferenceRoomsListOffsetSizeApi
     */
    public v2BroadcastsConferenceRoomsListOffsetSizeGet(offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, search?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsConferenceRoomsListOffsetSizeApiFp(this.configuration).v2BroadcastsConferenceRoomsListOffsetSizeGet(offset, size, accept, sortBy, orderBy, search, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsConferenceRoomsRoomIdApi - axios parameter creator
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes a conference room. The room id is key so if this is called with the same room id then new room is overwritten to old one
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdDelete: async (roomId: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsRoomIdDelete', 'roomId', roomId)
            const localVarPath = `/v2/broadcasts/conference-rooms/{room_id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get conference room object
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdGet: async (roomId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsRoomIdGet', 'roomId', roomId)
            const localVarPath = `/v2/broadcasts/conference-rooms/{roomId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edits previously saved conference room
         * @param {string} roomId 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdPut: async (roomId: string, contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsRoomIdPut', 'roomId', roomId)
            const localVarPath = `/v2/broadcasts/conference-rooms/{room_id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsRoomIdApi - functional programming interface
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsConferenceRoomsRoomIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes a conference room. The room id is key so if this is called with the same room id then new room is overwritten to old one
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsConferenceRoomsRoomIdDelete(roomId: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsConferenceRoomsRoomIdDelete(roomId, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsConferenceRoomsRoomIdApi.v2BroadcastsConferenceRoomsRoomIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get conference room object
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsConferenceRoomsRoomIdGet(roomId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsConferenceRoomsRoomIdGet(roomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsConferenceRoomsRoomIdApi.v2BroadcastsConferenceRoomsRoomIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edits previously saved conference room
         * @param {string} roomId 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsConferenceRoomsRoomIdPut(roomId: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsConferenceRoomsRoomIdPut(roomId, contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsConferenceRoomsRoomIdApi.v2BroadcastsConferenceRoomsRoomIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsRoomIdApi - factory interface
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsConferenceRoomsRoomIdApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes a conference room. The room id is key so if this is called with the same room id then new room is overwritten to old one
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdDelete(roomId: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsConferenceRoomsRoomIdDelete(roomId, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get conference room object
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdGet(roomId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.v2BroadcastsConferenceRoomsRoomIdGet(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edits previously saved conference room
         * @param {string} roomId 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdPut(roomId: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsConferenceRoomsRoomIdPut(roomId, contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsConferenceRoomsRoomIdApi - object-oriented interface
 * @export
 * @class V2BroadcastsConferenceRoomsRoomIdApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsConferenceRoomsRoomIdApi extends BaseAPI {
    /**
     * 
     * @summary Deletes a conference room. The room id is key so if this is called with the same room id then new room is overwritten to old one
     * @param {string} roomId 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsConferenceRoomsRoomIdApi
     */
    public v2BroadcastsConferenceRoomsRoomIdDelete(roomId: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsConferenceRoomsRoomIdApiFp(this.configuration).v2BroadcastsConferenceRoomsRoomIdDelete(roomId, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get conference room object
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsConferenceRoomsRoomIdApi
     */
    public v2BroadcastsConferenceRoomsRoomIdGet(roomId: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsConferenceRoomsRoomIdApiFp(this.configuration).v2BroadcastsConferenceRoomsRoomIdGet(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edits previously saved conference room
     * @param {string} roomId 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsConferenceRoomsRoomIdApi
     */
    public v2BroadcastsConferenceRoomsRoomIdPut(roomId: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2BroadcastsConferenceRoomsRoomIdApiFp(this.configuration).v2BroadcastsConferenceRoomsRoomIdPut(roomId, contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsConferenceRoomsRoomIdAddApi - axios parameter creator
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdAddApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds the specified stream with streamId to the room.  Use PUT conference-rooms/{room_id}/{streamId}
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {string} [streamId] (Required) Stream id to add to the conference room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdAddPut: async (roomId: string, accept?: string, streamId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsRoomIdAddPut', 'roomId', roomId)
            const localVarPath = `/v2/broadcasts/conference-rooms/{room_id}/add`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (streamId !== undefined) {
                localVarQueryParameter['streamId'] = streamId;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsRoomIdAddApi - functional programming interface
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdAddApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsConferenceRoomsRoomIdAddApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Adds the specified stream with streamId to the room.  Use PUT conference-rooms/{room_id}/{streamId}
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {string} [streamId] (Required) Stream id to add to the conference room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsConferenceRoomsRoomIdAddPut(roomId: string, accept?: string, streamId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsConferenceRoomsRoomIdAddPut(roomId, accept, streamId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsConferenceRoomsRoomIdAddApi.v2BroadcastsConferenceRoomsRoomIdAddPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsRoomIdAddApi - factory interface
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdAddApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsConferenceRoomsRoomIdAddApiFp(configuration)
    return {
        /**
         * 
         * @summary Adds the specified stream with streamId to the room.  Use PUT conference-rooms/{room_id}/{streamId}
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {string} [streamId] (Required) Stream id to add to the conference room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdAddPut(roomId: string, accept?: string, streamId?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsConferenceRoomsRoomIdAddPut(roomId, accept, streamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsConferenceRoomsRoomIdAddApi - object-oriented interface
 * @export
 * @class V2BroadcastsConferenceRoomsRoomIdAddApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsConferenceRoomsRoomIdAddApi extends BaseAPI {
    /**
     * 
     * @summary Adds the specified stream with streamId to the room.  Use PUT conference-rooms/{room_id}/{streamId}
     * @param {string} roomId 
     * @param {string} [accept] 
     * @param {string} [streamId] (Required) Stream id to add to the conference room
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsConferenceRoomsRoomIdAddApi
     */
    public v2BroadcastsConferenceRoomsRoomIdAddPut(roomId: string, accept?: string, streamId?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsConferenceRoomsRoomIdAddApiFp(this.configuration).v2BroadcastsConferenceRoomsRoomIdAddPut(roomId, accept, streamId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsConferenceRoomsRoomIdDeleteApi - axios parameter creator
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdDeleteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes the specified stream correlated with streamId in the room. Use DELETE /conference-rooms/{room_id}/{streamId}
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {string} [streamId] (Required) Stream id to delete from the conference room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdDeletePut: async (roomId: string, accept?: string, streamId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsRoomIdDeletePut', 'roomId', roomId)
            const localVarPath = `/v2/broadcasts/conference-rooms/{room_id}/delete`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (streamId !== undefined) {
                localVarQueryParameter['streamId'] = streamId;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsRoomIdDeleteApi - functional programming interface
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdDeleteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsConferenceRoomsRoomIdDeleteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes the specified stream correlated with streamId in the room. Use DELETE /conference-rooms/{room_id}/{streamId}
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {string} [streamId] (Required) Stream id to delete from the conference room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsConferenceRoomsRoomIdDeletePut(roomId: string, accept?: string, streamId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsConferenceRoomsRoomIdDeletePut(roomId, accept, streamId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsConferenceRoomsRoomIdDeleteApi.v2BroadcastsConferenceRoomsRoomIdDeletePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsRoomIdDeleteApi - factory interface
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdDeleteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsConferenceRoomsRoomIdDeleteApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes the specified stream correlated with streamId in the room. Use DELETE /conference-rooms/{room_id}/{streamId}
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {string} [streamId] (Required) Stream id to delete from the conference room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdDeletePut(roomId: string, accept?: string, streamId?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsConferenceRoomsRoomIdDeletePut(roomId, accept, streamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsConferenceRoomsRoomIdDeleteApi - object-oriented interface
 * @export
 * @class V2BroadcastsConferenceRoomsRoomIdDeleteApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsConferenceRoomsRoomIdDeleteApi extends BaseAPI {
    /**
     * 
     * @summary Deletes the specified stream correlated with streamId in the room. Use DELETE /conference-rooms/{room_id}/{streamId}
     * @param {string} roomId 
     * @param {string} [accept] 
     * @param {string} [streamId] (Required) Stream id to delete from the conference room
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsConferenceRoomsRoomIdDeleteApi
     */
    public v2BroadcastsConferenceRoomsRoomIdDeletePut(roomId: string, accept?: string, streamId?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsConferenceRoomsRoomIdDeleteApiFp(this.configuration).v2BroadcastsConferenceRoomsRoomIdDeletePut(roomId, accept, streamId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsConferenceRoomsRoomIdRoomInfoApi - axios parameter creator
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdRoomInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the streams Ids in the room.
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {string} [streamId] If Stream Id is entered, that stream id will be isolated from the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdRoomInfoGet: async (roomId: string, accept?: string, streamId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsRoomIdRoomInfoGet', 'roomId', roomId)
            const localVarPath = `/v2/broadcasts/conference-rooms/{room_id}/room-info`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (streamId !== undefined) {
                localVarQueryParameter['streamId'] = streamId;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsRoomIdRoomInfoApi - functional programming interface
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdRoomInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsConferenceRoomsRoomIdRoomInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the streams Ids in the room.
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {string} [streamId] If Stream Id is entered, that stream id will be isolated from the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsConferenceRoomsRoomIdRoomInfoGet(roomId: string, accept?: string, streamId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsConferenceRoomsRoomIdRoomInfoGet(roomId, accept, streamId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsConferenceRoomsRoomIdRoomInfoApi.v2BroadcastsConferenceRoomsRoomIdRoomInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsRoomIdRoomInfoApi - factory interface
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdRoomInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsConferenceRoomsRoomIdRoomInfoApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the streams Ids in the room.
         * @param {string} roomId 
         * @param {string} [accept] 
         * @param {string} [streamId] If Stream Id is entered, that stream id will be isolated from the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdRoomInfoGet(roomId: string, accept?: string, streamId?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsConferenceRoomsRoomIdRoomInfoGet(roomId, accept, streamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsConferenceRoomsRoomIdRoomInfoApi - object-oriented interface
 * @export
 * @class V2BroadcastsConferenceRoomsRoomIdRoomInfoApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsConferenceRoomsRoomIdRoomInfoApi extends BaseAPI {
    /**
     * 
     * @summary Returns the streams Ids in the room.
     * @param {string} roomId 
     * @param {string} [accept] 
     * @param {string} [streamId] If Stream Id is entered, that stream id will be isolated from the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsConferenceRoomsRoomIdRoomInfoApi
     */
    public v2BroadcastsConferenceRoomsRoomIdRoomInfoGet(roomId: string, accept?: string, streamId?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsConferenceRoomsRoomIdRoomInfoApiFp(this.configuration).v2BroadcastsConferenceRoomsRoomIdRoomInfoGet(roomId, accept, streamId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsConferenceRoomsRoomIdStreamIdApi - axios parameter creator
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdStreamIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes the specified stream correlated with streamId in the room. Use 
         * @param {string} roomId 
         * @param {string} streamId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdStreamIdDelete: async (roomId: string, streamId: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsRoomIdStreamIdDelete', 'roomId', roomId)
            // verify required parameter 'streamId' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsRoomIdStreamIdDelete', 'streamId', streamId)
            const localVarPath = `/v2/broadcasts/conference-rooms/{room_id}/{streamId}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"streamId"}}`, encodeURIComponent(String(streamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds the specified stream with streamId to the room. 
         * @param {string} roomId 
         * @param {string} streamId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdStreamIdPut: async (roomId: string, streamId: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsRoomIdStreamIdPut', 'roomId', roomId)
            // verify required parameter 'streamId' is not null or undefined
            assertParamExists('v2BroadcastsConferenceRoomsRoomIdStreamIdPut', 'streamId', streamId)
            const localVarPath = `/v2/broadcasts/conference-rooms/{room_id}/{streamId}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"streamId"}}`, encodeURIComponent(String(streamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsRoomIdStreamIdApi - functional programming interface
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdStreamIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsConferenceRoomsRoomIdStreamIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes the specified stream correlated with streamId in the room. Use 
         * @param {string} roomId 
         * @param {string} streamId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsConferenceRoomsRoomIdStreamIdDelete(roomId: string, streamId: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsConferenceRoomsRoomIdStreamIdDelete(roomId, streamId, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsConferenceRoomsRoomIdStreamIdApi.v2BroadcastsConferenceRoomsRoomIdStreamIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Adds the specified stream with streamId to the room. 
         * @param {string} roomId 
         * @param {string} streamId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsConferenceRoomsRoomIdStreamIdPut(roomId: string, streamId: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsConferenceRoomsRoomIdStreamIdPut(roomId, streamId, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsConferenceRoomsRoomIdStreamIdApi.v2BroadcastsConferenceRoomsRoomIdStreamIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsConferenceRoomsRoomIdStreamIdApi - factory interface
 * @export
 */
export const V2BroadcastsConferenceRoomsRoomIdStreamIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsConferenceRoomsRoomIdStreamIdApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes the specified stream correlated with streamId in the room. Use 
         * @param {string} roomId 
         * @param {string} streamId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdStreamIdDelete(roomId: string, streamId: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsConferenceRoomsRoomIdStreamIdDelete(roomId, streamId, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds the specified stream with streamId to the room. 
         * @param {string} roomId 
         * @param {string} streamId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsConferenceRoomsRoomIdStreamIdPut(roomId: string, streamId: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsConferenceRoomsRoomIdStreamIdPut(roomId, streamId, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsConferenceRoomsRoomIdStreamIdApi - object-oriented interface
 * @export
 * @class V2BroadcastsConferenceRoomsRoomIdStreamIdApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsConferenceRoomsRoomIdStreamIdApi extends BaseAPI {
    /**
     * 
     * @summary Deletes the specified stream correlated with streamId in the room. Use 
     * @param {string} roomId 
     * @param {string} streamId 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsConferenceRoomsRoomIdStreamIdApi
     */
    public v2BroadcastsConferenceRoomsRoomIdStreamIdDelete(roomId: string, streamId: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsConferenceRoomsRoomIdStreamIdApiFp(this.configuration).v2BroadcastsConferenceRoomsRoomIdStreamIdDelete(roomId, streamId, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds the specified stream with streamId to the room. 
     * @param {string} roomId 
     * @param {string} streamId 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsConferenceRoomsRoomIdStreamIdApi
     */
    public v2BroadcastsConferenceRoomsRoomIdStreamIdPut(roomId: string, streamId: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsConferenceRoomsRoomIdStreamIdApiFp(this.configuration).v2BroadcastsConferenceRoomsRoomIdStreamIdPut(roomId, streamId, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsCountApi - axios parameter creator
 * @export
 */
export const V2BroadcastsCountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the total number of broadcasts
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsCountGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/broadcasts/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsCountApi - functional programming interface
 * @export
 */
export const V2BroadcastsCountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsCountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the total number of broadcasts
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsCountGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsCountGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsCountApi.v2BroadcastsCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsCountApi - factory interface
 * @export
 */
export const V2BroadcastsCountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsCountApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the total number of broadcasts
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsCountGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsCountGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsCountApi - object-oriented interface
 * @export
 * @class V2BroadcastsCountApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsCountApi extends BaseAPI {
    /**
     * 
     * @summary Get the total number of broadcasts
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsCountApi
     */
    public v2BroadcastsCountGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsCountApiFp(this.configuration).v2BroadcastsCountGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsCountSearchApi - axios parameter creator
 * @export
 */
export const V2BroadcastsCountSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the number of broadcasts depending on the searched items 
         * @param {string} search 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsCountSearchGet: async (search: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('v2BroadcastsCountSearchGet', 'search', search)
            const localVarPath = `/v2/broadcasts/count/{search}`
                .replace(`{${"search"}}`, encodeURIComponent(String(search)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsCountSearchApi - functional programming interface
 * @export
 */
export const V2BroadcastsCountSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsCountSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the number of broadcasts depending on the searched items 
         * @param {string} search 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsCountSearchGet(search: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsCountSearchGet(search, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsCountSearchApi.v2BroadcastsCountSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsCountSearchApi - factory interface
 * @export
 */
export const V2BroadcastsCountSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsCountSearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the number of broadcasts depending on the searched items 
         * @param {string} search 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsCountSearchGet(search: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsCountSearchGet(search, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsCountSearchApi - object-oriented interface
 * @export
 * @class V2BroadcastsCountSearchApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsCountSearchApi extends BaseAPI {
    /**
     * 
     * @summary Get the number of broadcasts depending on the searched items 
     * @param {string} search 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsCountSearchApi
     */
    public v2BroadcastsCountSearchGet(search: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsCountSearchApiFp(this.configuration).v2BroadcastsCountSearchGet(search, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsCreateApi - axios parameter creator
 * @export
 */
export const V2BroadcastsCreateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a Broadcast, IP Camera or Stream Source and returns the full broadcast object with rtmp address and other information. The different between Broadcast and IP Camera or Stream Source is that Broadcast is ingested by Ant Media ServerIP Camera or Str
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [autoStart] Only effective if stream is IP Camera or Stream Source. If it\&#39;s true, it starts automatically pulling stream. Its value is false by default
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsCreatePost: async (contentType?: string, accept?: string, autoStart?: boolean, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/broadcasts/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (autoStart !== undefined) {
                localVarQueryParameter['autoStart'] = autoStart;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsCreateApi - functional programming interface
 * @export
 */
export const V2BroadcastsCreateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsCreateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a Broadcast, IP Camera or Stream Source and returns the full broadcast object with rtmp address and other information. The different between Broadcast and IP Camera or Stream Source is that Broadcast is ingested by Ant Media ServerIP Camera or Str
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [autoStart] Only effective if stream is IP Camera or Stream Source. If it\&#39;s true, it starts automatically pulling stream. Its value is false by default
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsCreatePost(contentType?: string, accept?: string, autoStart?: boolean, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsCreatePost(contentType, accept, autoStart, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsCreateApi.v2BroadcastsCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsCreateApi - factory interface
 * @export
 */
export const V2BroadcastsCreateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsCreateApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a Broadcast, IP Camera or Stream Source and returns the full broadcast object with rtmp address and other information. The different between Broadcast and IP Camera or Stream Source is that Broadcast is ingested by Ant Media ServerIP Camera or Str
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [autoStart] Only effective if stream is IP Camera or Stream Source. If it\&#39;s true, it starts automatically pulling stream. Its value is false by default
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsCreatePost(contentType?: string, accept?: string, autoStart?: boolean, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsCreatePost(contentType, accept, autoStart, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsCreateApi - object-oriented interface
 * @export
 * @class V2BroadcastsCreateApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsCreateApi extends BaseAPI {
    /**
     * 
     * @summary Creates a Broadcast, IP Camera or Stream Source and returns the full broadcast object with rtmp address and other information. The different between Broadcast and IP Camera or Stream Source is that Broadcast is ingested by Ant Media ServerIP Camera or Str
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {boolean} [autoStart] Only effective if stream is IP Camera or Stream Source. If it\&#39;s true, it starts automatically pulling stream. Its value is false by default
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsCreateApi
     */
    public v2BroadcastsCreatePost(contentType?: string, accept?: string, autoStart?: boolean, body?: object, options?: RawAxiosRequestConfig) {
        return V2BroadcastsCreateApiFp(this.configuration).v2BroadcastsCreatePost(contentType, accept, autoStart, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsFilterListOffsetSizeTypeApi - axios parameter creator
 * @export
 */
export const V2BroadcastsFilterListOffsetSizeTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns filtered broadcast list according to type. It\'s useful for getting IP Camera and Stream Sources from the whole list. If you want to use sort mechanism, we recommend using Mongo DB.
         * @param {string} offset 
         * @param {string} size 
         * @param {string} type 
         * @param {string} [accept] 
         * @param {string} [sortBy] field to sort
         * @param {string} [orderBy] asc for Ascending, desc Descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsFilterListOffsetSizeTypeGet: async (offset: string, size: string, type: string, accept?: string, sortBy?: string, orderBy?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('v2BroadcastsFilterListOffsetSizeTypeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('v2BroadcastsFilterListOffsetSizeTypeGet', 'size', size)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('v2BroadcastsFilterListOffsetSizeTypeGet', 'type', type)
            const localVarPath = `/v2/broadcasts/filter-list/{offset}/{size}/{type}`
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsFilterListOffsetSizeTypeApi - functional programming interface
 * @export
 */
export const V2BroadcastsFilterListOffsetSizeTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsFilterListOffsetSizeTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns filtered broadcast list according to type. It\'s useful for getting IP Camera and Stream Sources from the whole list. If you want to use sort mechanism, we recommend using Mongo DB.
         * @param {string} offset 
         * @param {string} size 
         * @param {string} type 
         * @param {string} [accept] 
         * @param {string} [sortBy] field to sort
         * @param {string} [orderBy] asc for Ascending, desc Descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsFilterListOffsetSizeTypeGet(offset: string, size: string, type: string, accept?: string, sortBy?: string, orderBy?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsFilterListOffsetSizeTypeGet(offset, size, type, accept, sortBy, orderBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsFilterListOffsetSizeTypeApi.v2BroadcastsFilterListOffsetSizeTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsFilterListOffsetSizeTypeApi - factory interface
 * @export
 */
export const V2BroadcastsFilterListOffsetSizeTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsFilterListOffsetSizeTypeApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns filtered broadcast list according to type. It\'s useful for getting IP Camera and Stream Sources from the whole list. If you want to use sort mechanism, we recommend using Mongo DB.
         * @param {string} offset 
         * @param {string} size 
         * @param {string} type 
         * @param {string} [accept] 
         * @param {string} [sortBy] field to sort
         * @param {string} [orderBy] asc for Ascending, desc Descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsFilterListOffsetSizeTypeGet(offset: string, size: string, type: string, accept?: string, sortBy?: string, orderBy?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsFilterListOffsetSizeTypeGet(offset, size, type, accept, sortBy, orderBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsFilterListOffsetSizeTypeApi - object-oriented interface
 * @export
 * @class V2BroadcastsFilterListOffsetSizeTypeApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsFilterListOffsetSizeTypeApi extends BaseAPI {
    /**
     * 
     * @summary Returns filtered broadcast list according to type. It\'s useful for getting IP Camera and Stream Sources from the whole list. If you want to use sort mechanism, we recommend using Mongo DB.
     * @param {string} offset 
     * @param {string} size 
     * @param {string} type 
     * @param {string} [accept] 
     * @param {string} [sortBy] field to sort
     * @param {string} [orderBy] asc for Ascending, desc Descending order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsFilterListOffsetSizeTypeApi
     */
    public v2BroadcastsFilterListOffsetSizeTypeGet(offset: string, size: string, type: string, accept?: string, sortBy?: string, orderBy?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsFilterListOffsetSizeTypeApiFp(this.configuration).v2BroadcastsFilterListOffsetSizeTypeGet(offset, size, type, accept, sortBy, orderBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete broadcast from data store and stop if it\'s broadcasting
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdDelete: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdDelete', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get broadcast object
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdGet', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the Broadcast objects fields if it\'s not null. The updated fields are as follows: name, description, userName, password, IP address, streamUrl of the broadcast. It also updates the social endpoints
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdPut: async (id: string, contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdPut', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete broadcast from data store and stop if it\'s broadcasting
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdDelete(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdDelete(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdApi.v2BroadcastsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get broadcast object
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdApi.v2BroadcastsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates the Broadcast objects fields if it\'s not null. The updated fields are as follows: name, description, userName, password, IP address, streamUrl of the broadcast. It also updates the social endpoints
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdPut(id: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdPut(id, contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdApi.v2BroadcastsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdApi - factory interface
 * @export
 */
export const V2BroadcastsIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete broadcast from data store and stop if it\'s broadcasting
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdDelete(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdDelete(id, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get broadcast object
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.v2BroadcastsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates the Broadcast objects fields if it\'s not null. The updated fields are as follows: name, description, userName, password, IP address, streamUrl of the broadcast. It also updates the social endpoints
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdPut(id: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdPut(id, contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdApi extends BaseAPI {
    /**
     * 
     * @summary Delete broadcast from data store and stop if it\'s broadcasting
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdApi
     */
    public v2BroadcastsIdDelete(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdApiFp(this.configuration).v2BroadcastsIdDelete(id, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get broadcast object
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdApi
     */
    public v2BroadcastsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdApiFp(this.configuration).v2BroadcastsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates the Broadcast objects fields if it\'s not null. The updated fields are as follows: name, description, userName, password, IP address, streamUrl of the broadcast. It also updates the social endpoints
     * @param {string} id 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdApi
     */
    public v2BroadcastsIdPut(id: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdApiFp(this.configuration).v2BroadcastsIdPut(id, contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdBroadcastStatisticsApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdBroadcastStatisticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the broadcast live statistics total RTMP watcher count, total HLS watcher count, total WebRTC watcher count
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdBroadcastStatisticsGet: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdBroadcastStatisticsGet', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/broadcast-statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdBroadcastStatisticsApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdBroadcastStatisticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdBroadcastStatisticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the broadcast live statistics total RTMP watcher count, total HLS watcher count, total WebRTC watcher count
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdBroadcastStatisticsGet(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdBroadcastStatisticsGet(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdBroadcastStatisticsApi.v2BroadcastsIdBroadcastStatisticsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdBroadcastStatisticsApi - factory interface
 * @export
 */
export const V2BroadcastsIdBroadcastStatisticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdBroadcastStatisticsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the broadcast live statistics total RTMP watcher count, total HLS watcher count, total WebRTC watcher count
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdBroadcastStatisticsGet(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdBroadcastStatisticsGet(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdBroadcastStatisticsApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdBroadcastStatisticsApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdBroadcastStatisticsApi extends BaseAPI {
    /**
     * 
     * @summary Get the broadcast live statistics total RTMP watcher count, total HLS watcher count, total WebRTC watcher count
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdBroadcastStatisticsApi
     */
    public v2BroadcastsIdBroadcastStatisticsGet(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdBroadcastStatisticsApiFp(this.configuration).v2BroadcastsIdBroadcastStatisticsGet(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdDataApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Send stream participants a message through Data Channel in a WebRTC stream
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdDataPost: async (id: string, contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdDataPost', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdDataApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Send stream participants a message through Data Channel in a WebRTC stream
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdDataPost(id: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdDataPost(id, contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdDataApi.v2BroadcastsIdDataPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdDataApi - factory interface
 * @export
 */
export const V2BroadcastsIdDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdDataApiFp(configuration)
    return {
        /**
         * 
         * @summary Send stream participants a message through Data Channel in a WebRTC stream
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdDataPost(id: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdDataPost(id, contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdDataApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdDataApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdDataApi extends BaseAPI {
    /**
     * 
     * @summary Send stream participants a message through Data Channel in a WebRTC stream
     * @param {string} id 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdDataApi
     */
    public v2BroadcastsIdDataPost(id: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdDataApiFp(this.configuration).v2BroadcastsIdDataPost(id, contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdDetectionsCountApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdDetectionsCountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get total number of detected objects
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdDetectionsCountGet: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdDetectionsCountGet', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/detections/count`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdDetectionsCountApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdDetectionsCountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdDetectionsCountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get total number of detected objects
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdDetectionsCountGet(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdDetectionsCountGet(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdDetectionsCountApi.v2BroadcastsIdDetectionsCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdDetectionsCountApi - factory interface
 * @export
 */
export const V2BroadcastsIdDetectionsCountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdDetectionsCountApiFp(configuration)
    return {
        /**
         * 
         * @summary Get total number of detected objects
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdDetectionsCountGet(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdDetectionsCountGet(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdDetectionsCountApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdDetectionsCountApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdDetectionsCountApi extends BaseAPI {
    /**
     * 
     * @summary Get total number of detected objects
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdDetectionsCountApi
     */
    public v2BroadcastsIdDetectionsCountGet(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdDetectionsCountApiFp(this.configuration).v2BroadcastsIdDetectionsCountGet(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdDetectionsOffsetSizeApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdDetectionsOffsetSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get detected objects from the stream based on offset and size
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdDetectionsOffsetSizeGet: async (id: string, offset: string, size: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdDetectionsOffsetSizeGet', 'id', id)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('v2BroadcastsIdDetectionsOffsetSizeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('v2BroadcastsIdDetectionsOffsetSizeGet', 'size', size)
            const localVarPath = `/v2/broadcasts/{id}/detections/{offset}/{size}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdDetectionsOffsetSizeApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdDetectionsOffsetSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdDetectionsOffsetSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get detected objects from the stream based on offset and size
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdDetectionsOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdDetectionsOffsetSizeGet(id, offset, size, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdDetectionsOffsetSizeApi.v2BroadcastsIdDetectionsOffsetSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdDetectionsOffsetSizeApi - factory interface
 * @export
 */
export const V2BroadcastsIdDetectionsOffsetSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdDetectionsOffsetSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary Get detected objects from the stream based on offset and size
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdDetectionsOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdDetectionsOffsetSizeGet(id, offset, size, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdDetectionsOffsetSizeApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdDetectionsOffsetSizeApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdDetectionsOffsetSizeApi extends BaseAPI {
    /**
     * 
     * @summary Get detected objects from the stream based on offset and size
     * @param {string} id 
     * @param {string} offset 
     * @param {string} size 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdDetectionsOffsetSizeApi
     */
    public v2BroadcastsIdDetectionsOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdDetectionsOffsetSizeApiFp(this.configuration).v2BroadcastsIdDetectionsOffsetSizeGet(id, offset, size, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdEndpointApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary remove Endpoint
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [rtmpUrl] (Required) RTMP url of the endpoint that will be stopped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdEndpointDelete: async (id: string, accept?: string, rtmpUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdEndpointDelete', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/endpoint`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rtmpUrl !== undefined) {
                localVarQueryParameter['rtmpUrl'] = rtmpUrl;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary add Endpoint V2
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [rtmpUrl] (Required) RTMP url of the endpoint that stream will be republished. If required, please encode the URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdEndpointPost: async (id: string, accept?: string, rtmpUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdEndpointPost', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/endpoint`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (rtmpUrl !== undefined) {
                localVarQueryParameter['rtmpUrl'] = rtmpUrl;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdEndpointApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary remove Endpoint
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [rtmpUrl] (Required) RTMP url of the endpoint that will be stopped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdEndpointDelete(id: string, accept?: string, rtmpUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdEndpointDelete(id, accept, rtmpUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdEndpointApi.v2BroadcastsIdEndpointDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary add Endpoint V2
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [rtmpUrl] (Required) RTMP url of the endpoint that stream will be republished. If required, please encode the URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdEndpointPost(id: string, accept?: string, rtmpUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdEndpointPost(id, accept, rtmpUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdEndpointApi.v2BroadcastsIdEndpointPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdEndpointApi - factory interface
 * @export
 */
export const V2BroadcastsIdEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdEndpointApiFp(configuration)
    return {
        /**
         * 
         * @summary remove Endpoint
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [rtmpUrl] (Required) RTMP url of the endpoint that will be stopped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdEndpointDelete(id: string, accept?: string, rtmpUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdEndpointDelete(id, accept, rtmpUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary add Endpoint V2
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [rtmpUrl] (Required) RTMP url of the endpoint that stream will be republished. If required, please encode the URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdEndpointPost(id: string, accept?: string, rtmpUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdEndpointPost(id, accept, rtmpUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdEndpointApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdEndpointApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdEndpointApi extends BaseAPI {
    /**
     * 
     * @summary remove Endpoint
     * @param {string} id 
     * @param {string} [accept] 
     * @param {string} [rtmpUrl] (Required) RTMP url of the endpoint that will be stopped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdEndpointApi
     */
    public v2BroadcastsIdEndpointDelete(id: string, accept?: string, rtmpUrl?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdEndpointApiFp(this.configuration).v2BroadcastsIdEndpointDelete(id, accept, rtmpUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary add Endpoint V2
     * @param {string} id 
     * @param {string} [accept] 
     * @param {string} [rtmpUrl] (Required) RTMP url of the endpoint that stream will be republished. If required, please encode the URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdEndpointApi
     */
    public v2BroadcastsIdEndpointPost(id: string, accept?: string, rtmpUrl?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdEndpointApiFp(this.configuration).v2BroadcastsIdEndpointPost(id, accept, rtmpUrl, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdIpCameraDeviceProfilesApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdIpCameraDeviceProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Notes here
         * @summary Get The Profile List for an ONVIF IP Cameras
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdIpCameraDeviceProfilesGet: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdIpCameraDeviceProfilesGet', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/ip-camera/device-profiles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdIpCameraDeviceProfilesApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdIpCameraDeviceProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdIpCameraDeviceProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Notes here
         * @summary Get The Profile List for an ONVIF IP Cameras
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdIpCameraDeviceProfilesGet(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdIpCameraDeviceProfilesGet(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdIpCameraDeviceProfilesApi.v2BroadcastsIdIpCameraDeviceProfilesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdIpCameraDeviceProfilesApi - factory interface
 * @export
 */
export const V2BroadcastsIdIpCameraDeviceProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdIpCameraDeviceProfilesApiFp(configuration)
    return {
        /**
         * Notes here
         * @summary Get The Profile List for an ONVIF IP Cameras
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdIpCameraDeviceProfilesGet(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdIpCameraDeviceProfilesGet(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdIpCameraDeviceProfilesApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdIpCameraDeviceProfilesApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdIpCameraDeviceProfilesApi extends BaseAPI {
    /**
     * Notes here
     * @summary Get The Profile List for an ONVIF IP Cameras
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdIpCameraDeviceProfilesApi
     */
    public v2BroadcastsIdIpCameraDeviceProfilesGet(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdIpCameraDeviceProfilesApiFp(this.configuration).v2BroadcastsIdIpCameraDeviceProfilesGet(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdIpCameraMoveApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdIpCameraMoveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Move IP Camera. It support continuous, relative and absolute move. By default it\'s relative move.Movement parameters should be given according to movement type. Generally here are the values For Absolute move, value X and value Y is between -1.0f and 1.0f
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [valueX] Movement in X direction. If not specified, it\&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
         * @param {string} [valueY] Movement in Y direction. If not specified, it\&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
         * @param {string} [valueZ] Movement in Zoom. If not specified, it\&#39;s assumed to be zero. Valid ranges for relative and continous move is between -1.0f and 1.0f. For absolute move between 0.0f and 1.0f 
         * @param {string} [movement] Movement type. It can be absolute, relative or continuous. If not specified, it\&#39;s relative
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdIpCameraMovePost: async (id: string, accept?: string, valueX?: string, valueY?: string, valueZ?: string, movement?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdIpCameraMovePost', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/ip-camera/move`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (valueX !== undefined) {
                localVarQueryParameter['valueX'] = valueX;
            }

            if (valueY !== undefined) {
                localVarQueryParameter['valueY'] = valueY;
            }

            if (valueZ !== undefined) {
                localVarQueryParameter['valueZ'] = valueZ;
            }

            if (movement !== undefined) {
                localVarQueryParameter['movement'] = movement;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdIpCameraMoveApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdIpCameraMoveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdIpCameraMoveApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Move IP Camera. It support continuous, relative and absolute move. By default it\'s relative move.Movement parameters should be given according to movement type. Generally here are the values For Absolute move, value X and value Y is between -1.0f and 1.0f
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [valueX] Movement in X direction. If not specified, it\&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
         * @param {string} [valueY] Movement in Y direction. If not specified, it\&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
         * @param {string} [valueZ] Movement in Zoom. If not specified, it\&#39;s assumed to be zero. Valid ranges for relative and continous move is between -1.0f and 1.0f. For absolute move between 0.0f and 1.0f 
         * @param {string} [movement] Movement type. It can be absolute, relative or continuous. If not specified, it\&#39;s relative
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdIpCameraMovePost(id: string, accept?: string, valueX?: string, valueY?: string, valueZ?: string, movement?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdIpCameraMovePost(id, accept, valueX, valueY, valueZ, movement, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdIpCameraMoveApi.v2BroadcastsIdIpCameraMovePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdIpCameraMoveApi - factory interface
 * @export
 */
export const V2BroadcastsIdIpCameraMoveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdIpCameraMoveApiFp(configuration)
    return {
        /**
         * 
         * @summary Move IP Camera. It support continuous, relative and absolute move. By default it\'s relative move.Movement parameters should be given according to movement type. Generally here are the values For Absolute move, value X and value Y is between -1.0f and 1.0f
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [valueX] Movement in X direction. If not specified, it\&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
         * @param {string} [valueY] Movement in Y direction. If not specified, it\&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
         * @param {string} [valueZ] Movement in Zoom. If not specified, it\&#39;s assumed to be zero. Valid ranges for relative and continous move is between -1.0f and 1.0f. For absolute move between 0.0f and 1.0f 
         * @param {string} [movement] Movement type. It can be absolute, relative or continuous. If not specified, it\&#39;s relative
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdIpCameraMovePost(id: string, accept?: string, valueX?: string, valueY?: string, valueZ?: string, movement?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdIpCameraMovePost(id, accept, valueX, valueY, valueZ, movement, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdIpCameraMoveApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdIpCameraMoveApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdIpCameraMoveApi extends BaseAPI {
    /**
     * 
     * @summary Move IP Camera. It support continuous, relative and absolute move. By default it\'s relative move.Movement parameters should be given according to movement type. Generally here are the values For Absolute move, value X and value Y is between -1.0f and 1.0f
     * @param {string} id 
     * @param {string} [accept] 
     * @param {string} [valueX] Movement in X direction. If not specified, it\&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
     * @param {string} [valueY] Movement in Y direction. If not specified, it\&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
     * @param {string} [valueZ] Movement in Zoom. If not specified, it\&#39;s assumed to be zero. Valid ranges for relative and continous move is between -1.0f and 1.0f. For absolute move between 0.0f and 1.0f 
     * @param {string} [movement] Movement type. It can be absolute, relative or continuous. If not specified, it\&#39;s relative
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdIpCameraMoveApi
     */
    public v2BroadcastsIdIpCameraMovePost(id: string, accept?: string, valueX?: string, valueY?: string, valueZ?: string, movement?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdIpCameraMoveApiFp(this.configuration).v2BroadcastsIdIpCameraMovePost(id, accept, valueX, valueY, valueZ, movement, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdIpCameraStopMoveApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdIpCameraStopMoveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Stop move for IP Camera.
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdIpCameraStopMovePost: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdIpCameraStopMovePost', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/ip-camera/stop-move`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdIpCameraStopMoveApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdIpCameraStopMoveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdIpCameraStopMoveApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Stop move for IP Camera.
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdIpCameraStopMovePost(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdIpCameraStopMovePost(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdIpCameraStopMoveApi.v2BroadcastsIdIpCameraStopMovePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdIpCameraStopMoveApi - factory interface
 * @export
 */
export const V2BroadcastsIdIpCameraStopMoveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdIpCameraStopMoveApiFp(configuration)
    return {
        /**
         * 
         * @summary Stop move for IP Camera.
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdIpCameraStopMovePost(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdIpCameraStopMovePost(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdIpCameraStopMoveApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdIpCameraStopMoveApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdIpCameraStopMoveApi extends BaseAPI {
    /**
     * 
     * @summary Stop move for IP Camera.
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdIpCameraStopMoveApi
     */
    public v2BroadcastsIdIpCameraStopMovePost(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdIpCameraStopMoveApiFp(this.configuration).v2BroadcastsIdIpCameraStopMovePost(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdJwtTokenApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdJwtTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates JWT token for specified stream. It\'s not required to let the server generate JWT. Generally JWT tokens should be generated on the client side.
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [expireDate] (Required) The expire time of the token. It\&#39;s in unix timestamp seconds.
         * @param {string} [type] (Required) Type of the JWT token. It may be play or publish 
         * @param {string} [roomId] Room Id that token belongs to. It\&#39;s not mandatory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdJwtTokenGet: async (id: string, accept?: string, expireDate?: string, type?: string, roomId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdJwtTokenGet', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/jwt-token`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expireDate !== undefined) {
                localVarQueryParameter['expireDate'] = expireDate;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['roomId'] = roomId;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdJwtTokenApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdJwtTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdJwtTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generates JWT token for specified stream. It\'s not required to let the server generate JWT. Generally JWT tokens should be generated on the client side.
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [expireDate] (Required) The expire time of the token. It\&#39;s in unix timestamp seconds.
         * @param {string} [type] (Required) Type of the JWT token. It may be play or publish 
         * @param {string} [roomId] Room Id that token belongs to. It\&#39;s not mandatory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdJwtTokenGet(id: string, accept?: string, expireDate?: string, type?: string, roomId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdJwtTokenGet(id, accept, expireDate, type, roomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdJwtTokenApi.v2BroadcastsIdJwtTokenGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdJwtTokenApi - factory interface
 * @export
 */
export const V2BroadcastsIdJwtTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdJwtTokenApiFp(configuration)
    return {
        /**
         * 
         * @summary Generates JWT token for specified stream. It\'s not required to let the server generate JWT. Generally JWT tokens should be generated on the client side.
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [expireDate] (Required) The expire time of the token. It\&#39;s in unix timestamp seconds.
         * @param {string} [type] (Required) Type of the JWT token. It may be play or publish 
         * @param {string} [roomId] Room Id that token belongs to. It\&#39;s not mandatory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdJwtTokenGet(id: string, accept?: string, expireDate?: string, type?: string, roomId?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdJwtTokenGet(id, accept, expireDate, type, roomId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdJwtTokenApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdJwtTokenApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdJwtTokenApi extends BaseAPI {
    /**
     * 
     * @summary Generates JWT token for specified stream. It\'s not required to let the server generate JWT. Generally JWT tokens should be generated on the client side.
     * @param {string} id 
     * @param {string} [accept] 
     * @param {string} [expireDate] (Required) The expire time of the token. It\&#39;s in unix timestamp seconds.
     * @param {string} [type] (Required) Type of the JWT token. It may be play or publish 
     * @param {string} [roomId] Room Id that token belongs to. It\&#39;s not mandatory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdJwtTokenApi
     */
    public v2BroadcastsIdJwtTokenGet(id: string, accept?: string, expireDate?: string, type?: string, roomId?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdJwtTokenApiFp(this.configuration).v2BroadcastsIdJwtTokenGet(id, accept, expireDate, type, roomId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdRecordingRecordingStatusApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdRecordingRecordingStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Set stream specific recording setting, this setting overrides general Mp4 and WebM Muxing Setting
         * @param {string} id 
         * @param {string} recordingStatus 
         * @param {string} [accept] 
         * @param {string} [recordType] Record type: \&#39;mp4\&#39; or \&#39;webm\&#39;. It\&#39;s optional parameter.
         * @param {string} [resolutionHeight] Resolution height of the broadcast that is wanted to record. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdRecordingRecordingStatusPut: async (id: string, recordingStatus: string, accept?: string, recordType?: string, resolutionHeight?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdRecordingRecordingStatusPut', 'id', id)
            // verify required parameter 'recordingStatus' is not null or undefined
            assertParamExists('v2BroadcastsIdRecordingRecordingStatusPut', 'recordingStatus', recordingStatus)
            const localVarPath = `/v2/broadcasts/{id}/recording/{recording-status}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"recording-status"}}`, encodeURIComponent(String(recordingStatus)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recordType !== undefined) {
                localVarQueryParameter['recordType'] = recordType;
            }

            if (resolutionHeight !== undefined) {
                localVarQueryParameter['resolutionHeight'] = resolutionHeight;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdRecordingRecordingStatusApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdRecordingRecordingStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdRecordingRecordingStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Set stream specific recording setting, this setting overrides general Mp4 and WebM Muxing Setting
         * @param {string} id 
         * @param {string} recordingStatus 
         * @param {string} [accept] 
         * @param {string} [recordType] Record type: \&#39;mp4\&#39; or \&#39;webm\&#39;. It\&#39;s optional parameter.
         * @param {string} [resolutionHeight] Resolution height of the broadcast that is wanted to record. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdRecordingRecordingStatusPut(id: string, recordingStatus: string, accept?: string, recordType?: string, resolutionHeight?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdRecordingRecordingStatusPut(id, recordingStatus, accept, recordType, resolutionHeight, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdRecordingRecordingStatusApi.v2BroadcastsIdRecordingRecordingStatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdRecordingRecordingStatusApi - factory interface
 * @export
 */
export const V2BroadcastsIdRecordingRecordingStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdRecordingRecordingStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Set stream specific recording setting, this setting overrides general Mp4 and WebM Muxing Setting
         * @param {string} id 
         * @param {string} recordingStatus 
         * @param {string} [accept] 
         * @param {string} [recordType] Record type: \&#39;mp4\&#39; or \&#39;webm\&#39;. It\&#39;s optional parameter.
         * @param {string} [resolutionHeight] Resolution height of the broadcast that is wanted to record. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdRecordingRecordingStatusPut(id: string, recordingStatus: string, accept?: string, recordType?: string, resolutionHeight?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdRecordingRecordingStatusPut(id, recordingStatus, accept, recordType, resolutionHeight, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdRecordingRecordingStatusApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdRecordingRecordingStatusApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdRecordingRecordingStatusApi extends BaseAPI {
    /**
     * 
     * @summary Set stream specific recording setting, this setting overrides general Mp4 and WebM Muxing Setting
     * @param {string} id 
     * @param {string} recordingStatus 
     * @param {string} [accept] 
     * @param {string} [recordType] Record type: \&#39;mp4\&#39; or \&#39;webm\&#39;. It\&#39;s optional parameter.
     * @param {string} [resolutionHeight] Resolution height of the broadcast that is wanted to record. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdRecordingRecordingStatusApi
     */
    public v2BroadcastsIdRecordingRecordingStatusPut(id: string, recordingStatus: string, accept?: string, recordType?: string, resolutionHeight?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdRecordingRecordingStatusApiFp(this.configuration).v2BroadcastsIdRecordingRecordingStatusPut(id, recordingStatus, accept, recordType, resolutionHeight, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdRtmpEndpointApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdRtmpEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Remove third pary rtmp end point from the stream. For the stream that is broadcasting, it will stop immediately
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [endpointServiceId] (Required) RTMP url of the endpoint that will be stopped.
         * @param {string} [resolutionHeight] (Required) Resolution specifier if endpoint has been added with resolution. Only applicable if user added RTMP endpoint with a resolution speficier. Otherwise won\&#39;t work and won\&#39;t remove the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdRtmpEndpointDelete: async (id: string, accept?: string, endpointServiceId?: string, resolutionHeight?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdRtmpEndpointDelete', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/rtmp-endpoint`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endpointServiceId !== undefined) {
                localVarQueryParameter['endpointServiceId'] = endpointServiceId;
            }

            if (resolutionHeight !== undefined) {
                localVarQueryParameter['resolutionHeight'] = resolutionHeight;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a third party rtmp end point to the stream. It supports adding after broadcast is started. Resolution can be specified to send a specific adaptive resolution. If an url is already added to a stream, trying to add the same rtmp url will return false.
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [resolutionHeight] Resolution height of the broadcast that is wanted to send to the RTMP endpoint. 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdRtmpEndpointPost: async (id: string, contentType?: string, accept?: string, resolutionHeight?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdRtmpEndpointPost', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/rtmp-endpoint`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (resolutionHeight !== undefined) {
                localVarQueryParameter['resolutionHeight'] = resolutionHeight;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdRtmpEndpointApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdRtmpEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdRtmpEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Remove third pary rtmp end point from the stream. For the stream that is broadcasting, it will stop immediately
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [endpointServiceId] (Required) RTMP url of the endpoint that will be stopped.
         * @param {string} [resolutionHeight] (Required) Resolution specifier if endpoint has been added with resolution. Only applicable if user added RTMP endpoint with a resolution speficier. Otherwise won\&#39;t work and won\&#39;t remove the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdRtmpEndpointDelete(id: string, accept?: string, endpointServiceId?: string, resolutionHeight?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdRtmpEndpointDelete(id, accept, endpointServiceId, resolutionHeight, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdRtmpEndpointApi.v2BroadcastsIdRtmpEndpointDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Adds a third party rtmp end point to the stream. It supports adding after broadcast is started. Resolution can be specified to send a specific adaptive resolution. If an url is already added to a stream, trying to add the same rtmp url will return false.
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [resolutionHeight] Resolution height of the broadcast that is wanted to send to the RTMP endpoint. 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdRtmpEndpointPost(id: string, contentType?: string, accept?: string, resolutionHeight?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdRtmpEndpointPost(id, contentType, accept, resolutionHeight, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdRtmpEndpointApi.v2BroadcastsIdRtmpEndpointPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdRtmpEndpointApi - factory interface
 * @export
 */
export const V2BroadcastsIdRtmpEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdRtmpEndpointApiFp(configuration)
    return {
        /**
         * 
         * @summary Remove third pary rtmp end point from the stream. For the stream that is broadcasting, it will stop immediately
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [endpointServiceId] (Required) RTMP url of the endpoint that will be stopped.
         * @param {string} [resolutionHeight] (Required) Resolution specifier if endpoint has been added with resolution. Only applicable if user added RTMP endpoint with a resolution speficier. Otherwise won\&#39;t work and won\&#39;t remove the endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdRtmpEndpointDelete(id: string, accept?: string, endpointServiceId?: string, resolutionHeight?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdRtmpEndpointDelete(id, accept, endpointServiceId, resolutionHeight, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds a third party rtmp end point to the stream. It supports adding after broadcast is started. Resolution can be specified to send a specific adaptive resolution. If an url is already added to a stream, trying to add the same rtmp url will return false.
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [resolutionHeight] Resolution height of the broadcast that is wanted to send to the RTMP endpoint. 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdRtmpEndpointPost(id: string, contentType?: string, accept?: string, resolutionHeight?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdRtmpEndpointPost(id, contentType, accept, resolutionHeight, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdRtmpEndpointApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdRtmpEndpointApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdRtmpEndpointApi extends BaseAPI {
    /**
     * 
     * @summary Remove third pary rtmp end point from the stream. For the stream that is broadcasting, it will stop immediately
     * @param {string} id 
     * @param {string} [accept] 
     * @param {string} [endpointServiceId] (Required) RTMP url of the endpoint that will be stopped.
     * @param {string} [resolutionHeight] (Required) Resolution specifier if endpoint has been added with resolution. Only applicable if user added RTMP endpoint with a resolution speficier. Otherwise won\&#39;t work and won\&#39;t remove the endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdRtmpEndpointApi
     */
    public v2BroadcastsIdRtmpEndpointDelete(id: string, accept?: string, endpointServiceId?: string, resolutionHeight?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdRtmpEndpointApiFp(this.configuration).v2BroadcastsIdRtmpEndpointDelete(id, accept, endpointServiceId, resolutionHeight, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds a third party rtmp end point to the stream. It supports adding after broadcast is started. Resolution can be specified to send a specific adaptive resolution. If an url is already added to a stream, trying to add the same rtmp url will return false.
     * @param {string} id 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [resolutionHeight] Resolution height of the broadcast that is wanted to send to the RTMP endpoint. 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdRtmpEndpointApi
     */
    public v2BroadcastsIdRtmpEndpointPost(id: string, contentType?: string, accept?: string, resolutionHeight?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdRtmpEndpointApiFp(this.configuration).v2BroadcastsIdRtmpEndpointPost(id, contentType, accept, resolutionHeight, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdRtmpToWebrtcStatsApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdRtmpToWebrtcStatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get RTMP to WebRTC path stats in general
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdRtmpToWebrtcStatsGet: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdRtmpToWebrtcStatsGet', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/rtmp-to-webrtc-stats`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdRtmpToWebrtcStatsApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdRtmpToWebrtcStatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdRtmpToWebrtcStatsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get RTMP to WebRTC path stats in general
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdRtmpToWebrtcStatsGet(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdRtmpToWebrtcStatsGet(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdRtmpToWebrtcStatsApi.v2BroadcastsIdRtmpToWebrtcStatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdRtmpToWebrtcStatsApi - factory interface
 * @export
 */
export const V2BroadcastsIdRtmpToWebrtcStatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdRtmpToWebrtcStatsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get RTMP to WebRTC path stats in general
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdRtmpToWebrtcStatsGet(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdRtmpToWebrtcStatsGet(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdRtmpToWebrtcStatsApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdRtmpToWebrtcStatsApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdRtmpToWebrtcStatsApi extends BaseAPI {
    /**
     * 
     * @summary Get RTMP to WebRTC path stats in general
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdRtmpToWebrtcStatsApi
     */
    public v2BroadcastsIdRtmpToWebrtcStatsGet(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdRtmpToWebrtcStatsApiFp(this.configuration).v2BroadcastsIdRtmpToWebrtcStatsGet(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdStartApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdStartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Start streaming sources(IP Cameras, Stream Sources, PlayLists) 
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdStartPost: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdStartPost', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdStartApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdStartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdStartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Start streaming sources(IP Cameras, Stream Sources, PlayLists) 
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdStartPost(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdStartPost(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdStartApi.v2BroadcastsIdStartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdStartApi - factory interface
 * @export
 */
export const V2BroadcastsIdStartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdStartApiFp(configuration)
    return {
        /**
         * 
         * @summary Start streaming sources(IP Cameras, Stream Sources, PlayLists) 
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdStartPost(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdStartPost(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdStartApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdStartApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdStartApi extends BaseAPI {
    /**
     * 
     * @summary Start streaming sources(IP Cameras, Stream Sources, PlayLists) 
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdStartApi
     */
    public v2BroadcastsIdStartPost(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdStartApiFp(this.configuration).v2BroadcastsIdStartPost(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdStopApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdStopApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Stop streaming for the active stream. It both stops ingested(RTMP, WebRTC) or pulled stream sources (IP Cameras and Stream Sources)
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdStopPost: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdStopPost', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdStopApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdStopApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdStopApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Stop streaming for the active stream. It both stops ingested(RTMP, WebRTC) or pulled stream sources (IP Cameras and Stream Sources)
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdStopPost(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdStopPost(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdStopApi.v2BroadcastsIdStopPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdStopApi - factory interface
 * @export
 */
export const V2BroadcastsIdStopApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdStopApiFp(configuration)
    return {
        /**
         * 
         * @summary Stop streaming for the active stream. It both stops ingested(RTMP, WebRTC) or pulled stream sources (IP Cameras and Stream Sources)
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdStopPost(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdStopPost(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdStopApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdStopApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdStopApi extends BaseAPI {
    /**
     * 
     * @summary Stop streaming for the active stream. It both stops ingested(RTMP, WebRTC) or pulled stream sources (IP Cameras and Stream Sources)
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdStopApi
     */
    public v2BroadcastsIdStopPost(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdStopApiFp(this.configuration).v2BroadcastsIdStopPost(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdStreamInfoApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdStreamInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the stream info(width, height, bitrates and video codec) of the stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdStreamInfoGet: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdStreamInfoGet', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/stream-info`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdStreamInfoApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdStreamInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdStreamInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the stream info(width, height, bitrates and video codec) of the stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdStreamInfoGet(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdStreamInfoGet(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdStreamInfoApi.v2BroadcastsIdStreamInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdStreamInfoApi - factory interface
 * @export
 */
export const V2BroadcastsIdStreamInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdStreamInfoApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the stream info(width, height, bitrates and video codec) of the stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdStreamInfoGet(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdStreamInfoGet(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdStreamInfoApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdStreamInfoApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdStreamInfoApi extends BaseAPI {
    /**
     * 
     * @summary Returns the stream info(width, height, bitrates and video codec) of the stream
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdStreamInfoApi
     */
    public v2BroadcastsIdStreamInfoGet(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdStreamInfoApiFp(this.configuration).v2BroadcastsIdStreamInfoGet(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdSubscriberStatsListOffsetSizeApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdSubscriberStatsListOffsetSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the all subscriber statistics of the requested stream
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubscriberStatsListOffsetSizeGet: async (id: string, offset: string, size: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdSubscriberStatsListOffsetSizeGet', 'id', id)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('v2BroadcastsIdSubscriberStatsListOffsetSizeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('v2BroadcastsIdSubscriberStatsListOffsetSizeGet', 'size', size)
            const localVarPath = `/v2/broadcasts/{id}/subscriber-stats/list/{offset}/{size}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdSubscriberStatsListOffsetSizeApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdSubscriberStatsListOffsetSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdSubscriberStatsListOffsetSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the all subscriber statistics of the requested stream
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdSubscriberStatsListOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdSubscriberStatsListOffsetSizeGet(id, offset, size, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdSubscriberStatsListOffsetSizeApi.v2BroadcastsIdSubscriberStatsListOffsetSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdSubscriberStatsListOffsetSizeApi - factory interface
 * @export
 */
export const V2BroadcastsIdSubscriberStatsListOffsetSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdSubscriberStatsListOffsetSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the all subscriber statistics of the requested stream
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubscriberStatsListOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdSubscriberStatsListOffsetSizeGet(id, offset, size, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdSubscriberStatsListOffsetSizeApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdSubscriberStatsListOffsetSizeApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdSubscriberStatsListOffsetSizeApi extends BaseAPI {
    /**
     * 
     * @summary Get the all subscriber statistics of the requested stream
     * @param {string} id 
     * @param {string} offset 
     * @param {string} size 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdSubscriberStatsListOffsetSizeApi
     */
    public v2BroadcastsIdSubscriberStatsListOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdSubscriberStatsListOffsetSizeApiFp(this.configuration).v2BroadcastsIdSubscriberStatsListOffsetSizeGet(id, offset, size, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdSubscribersApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdSubscribersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Removes all subscriber related with the requested stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubscribersDelete: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdSubscribersDelete', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/subscribers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Subscriber to the requested stream 
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubscribersPost: async (id: string, contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdSubscribersPost', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/subscribers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdSubscribersApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdSubscribersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdSubscribersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Removes all subscriber related with the requested stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdSubscribersDelete(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdSubscribersDelete(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdSubscribersApi.v2BroadcastsIdSubscribersDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add Subscriber to the requested stream 
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdSubscribersPost(id: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdSubscribersPost(id, contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdSubscribersApi.v2BroadcastsIdSubscribersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdSubscribersApi - factory interface
 * @export
 */
export const V2BroadcastsIdSubscribersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdSubscribersApiFp(configuration)
    return {
        /**
         * 
         * @summary  Removes all subscriber related with the requested stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubscribersDelete(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdSubscribersDelete(id, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Subscriber to the requested stream 
         * @param {string} id 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubscribersPost(id: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdSubscribersPost(id, contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdSubscribersApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdSubscribersApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdSubscribersApi extends BaseAPI {
    /**
     * 
     * @summary  Removes all subscriber related with the requested stream
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdSubscribersApi
     */
    public v2BroadcastsIdSubscribersDelete(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdSubscribersApiFp(this.configuration).v2BroadcastsIdSubscribersDelete(id, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Subscriber to the requested stream 
     * @param {string} id 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdSubscribersApi
     */
    public v2BroadcastsIdSubscribersPost(id: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdSubscribersApiFp(this.configuration).v2BroadcastsIdSubscribersPost(id, contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdSubscribersListOffsetSizeApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdSubscribersListOffsetSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the all subscribers of the requested stream
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubscribersListOffsetSizeGet: async (id: string, offset: string, size: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdSubscribersListOffsetSizeGet', 'id', id)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('v2BroadcastsIdSubscribersListOffsetSizeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('v2BroadcastsIdSubscribersListOffsetSizeGet', 'size', size)
            const localVarPath = `/v2/broadcasts/{id}/subscribers/list/{offset}/{size}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdSubscribersListOffsetSizeApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdSubscribersListOffsetSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdSubscribersListOffsetSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the all subscribers of the requested stream
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdSubscribersListOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdSubscribersListOffsetSizeGet(id, offset, size, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdSubscribersListOffsetSizeApi.v2BroadcastsIdSubscribersListOffsetSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdSubscribersListOffsetSizeApi - factory interface
 * @export
 */
export const V2BroadcastsIdSubscribersListOffsetSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdSubscribersListOffsetSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the all subscribers of the requested stream
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubscribersListOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdSubscribersListOffsetSizeGet(id, offset, size, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdSubscribersListOffsetSizeApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdSubscribersListOffsetSizeApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdSubscribersListOffsetSizeApi extends BaseAPI {
    /**
     * 
     * @summary Get the all subscribers of the requested stream
     * @param {string} id 
     * @param {string} offset 
     * @param {string} size 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdSubscribersListOffsetSizeApi
     */
    public v2BroadcastsIdSubscribersListOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdSubscribersListOffsetSizeApiFp(this.configuration).v2BroadcastsIdSubscribersListOffsetSizeGet(id, offset, size, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdSubscribersSidApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdSubscribersSidApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete specific subscriber from data store for selected stream
         * @param {string} id 
         * @param {string} sid 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubscribersSidDelete: async (id: string, sid: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdSubscribersSidDelete', 'id', id)
            // verify required parameter 'sid' is not null or undefined
            assertParamExists('v2BroadcastsIdSubscribersSidDelete', 'sid', sid)
            const localVarPath = `/v2/broadcasts/{id}/subscribers/{sid}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"sid"}}`, encodeURIComponent(String(sid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdSubscribersSidApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdSubscribersSidApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdSubscribersSidApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete specific subscriber from data store for selected stream
         * @param {string} id 
         * @param {string} sid 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdSubscribersSidDelete(id: string, sid: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdSubscribersSidDelete(id, sid, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdSubscribersSidApi.v2BroadcastsIdSubscribersSidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdSubscribersSidApi - factory interface
 * @export
 */
export const V2BroadcastsIdSubscribersSidApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdSubscribersSidApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete specific subscriber from data store for selected stream
         * @param {string} id 
         * @param {string} sid 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubscribersSidDelete(id: string, sid: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdSubscribersSidDelete(id, sid, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdSubscribersSidApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdSubscribersSidApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdSubscribersSidApi extends BaseAPI {
    /**
     * 
     * @summary Delete specific subscriber from data store for selected stream
     * @param {string} id 
     * @param {string} sid 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdSubscribersSidApi
     */
    public v2BroadcastsIdSubscribersSidDelete(id: string, sid: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdSubscribersSidApiFp(this.configuration).v2BroadcastsIdSubscribersSidDelete(id, sid, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdSubtrackApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdSubtrackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a subtrack from a main track (broadcast).
         * @param {string} id2 
         * @param {string} [accept] 
         * @param {string} [id] (Required) Subtrack Stream Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubtrackDelete: async (id2: string, accept?: string, id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id2' is not null or undefined
            assertParamExists('v2BroadcastsIdSubtrackDelete', 'id2', id2)
            const localVarPath = `/v2/broadcasts/{id}/subtrack`
                .replace(`{${"id"}}`, encodeURIComponent(String(id2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a subtrack to a main track (broadcast).
         * @param {string} id2 
         * @param {string} [accept] 
         * @param {string} [id] (Required) Subtrack Stream Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubtrackPost: async (id2: string, accept?: string, id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id2' is not null or undefined
            assertParamExists('v2BroadcastsIdSubtrackPost', 'id2', id2)
            const localVarPath = `/v2/broadcasts/{id}/subtrack`
                .replace(`{${"id"}}`, encodeURIComponent(String(id2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdSubtrackApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdSubtrackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdSubtrackApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a subtrack from a main track (broadcast).
         * @param {string} id2 
         * @param {string} [accept] 
         * @param {string} [id] (Required) Subtrack Stream Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdSubtrackDelete(id2: string, accept?: string, id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdSubtrackDelete(id2, accept, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdSubtrackApi.v2BroadcastsIdSubtrackDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add a subtrack to a main track (broadcast).
         * @param {string} id2 
         * @param {string} [accept] 
         * @param {string} [id] (Required) Subtrack Stream Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdSubtrackPost(id2: string, accept?: string, id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdSubtrackPost(id2, accept, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdSubtrackApi.v2BroadcastsIdSubtrackPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdSubtrackApi - factory interface
 * @export
 */
export const V2BroadcastsIdSubtrackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdSubtrackApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a subtrack from a main track (broadcast).
         * @param {string} id2 
         * @param {string} [accept] 
         * @param {string} [id] (Required) Subtrack Stream Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubtrackDelete(id2: string, accept?: string, id?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdSubtrackDelete(id2, accept, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a subtrack to a main track (broadcast).
         * @param {string} id2 
         * @param {string} [accept] 
         * @param {string} [id] (Required) Subtrack Stream Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdSubtrackPost(id2: string, accept?: string, id?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdSubtrackPost(id2, accept, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdSubtrackApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdSubtrackApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdSubtrackApi extends BaseAPI {
    /**
     * 
     * @summary Delete a subtrack from a main track (broadcast).
     * @param {string} id2 
     * @param {string} [accept] 
     * @param {string} [id] (Required) Subtrack Stream Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdSubtrackApi
     */
    public v2BroadcastsIdSubtrackDelete(id2: string, accept?: string, id?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdSubtrackApiFp(this.configuration).v2BroadcastsIdSubtrackDelete(id2, accept, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a subtrack to a main track (broadcast).
     * @param {string} id2 
     * @param {string} [accept] 
     * @param {string} [id] (Required) Subtrack Stream Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdSubtrackApi
     */
    public v2BroadcastsIdSubtrackPost(id2: string, accept?: string, id?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdSubtrackApiFp(this.configuration).v2BroadcastsIdSubtrackPost(id2, accept, id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdTokenApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates random one-time token for specified stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [expireDate] (Required) The expire time of the token. It\&#39;s in unix timestamp seconds
         * @param {string} [type] (Required) Type of the token. It may be play or publish 
         * @param {string} [roomId] Room Id that token belongs to. It\&#39;s not mandatory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdTokenGet: async (id: string, accept?: string, expireDate?: string, type?: string, roomId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdTokenGet', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/token`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expireDate !== undefined) {
                localVarQueryParameter['expireDate'] = expireDate;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['roomId'] = roomId;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdTokenApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generates random one-time token for specified stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [expireDate] (Required) The expire time of the token. It\&#39;s in unix timestamp seconds
         * @param {string} [type] (Required) Type of the token. It may be play or publish 
         * @param {string} [roomId] Room Id that token belongs to. It\&#39;s not mandatory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdTokenGet(id: string, accept?: string, expireDate?: string, type?: string, roomId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdTokenGet(id, accept, expireDate, type, roomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdTokenApi.v2BroadcastsIdTokenGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdTokenApi - factory interface
 * @export
 */
export const V2BroadcastsIdTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdTokenApiFp(configuration)
    return {
        /**
         * 
         * @summary Generates random one-time token for specified stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {string} [expireDate] (Required) The expire time of the token. It\&#39;s in unix timestamp seconds
         * @param {string} [type] (Required) Type of the token. It may be play or publish 
         * @param {string} [roomId] Room Id that token belongs to. It\&#39;s not mandatory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdTokenGet(id: string, accept?: string, expireDate?: string, type?: string, roomId?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdTokenGet(id, accept, expireDate, type, roomId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdTokenApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdTokenApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdTokenApi extends BaseAPI {
    /**
     * 
     * @summary Generates random one-time token for specified stream
     * @param {string} id 
     * @param {string} [accept] 
     * @param {string} [expireDate] (Required) The expire time of the token. It\&#39;s in unix timestamp seconds
     * @param {string} [type] (Required) Type of the token. It may be play or publish 
     * @param {string} [roomId] Room Id that token belongs to. It\&#39;s not mandatory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdTokenApi
     */
    public v2BroadcastsIdTokenGet(id: string, accept?: string, expireDate?: string, type?: string, roomId?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdTokenApiFp(this.configuration).v2BroadcastsIdTokenGet(id, accept, expireDate, type, roomId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdTokensApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdTokensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Removes all tokens related with requested stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdTokensDelete: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdTokensDelete', 'id', id)
            const localVarPath = `/v2/broadcasts/{id}/tokens`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdTokensApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdTokensApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdTokensApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Removes all tokens related with requested stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdTokensDelete(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdTokensDelete(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdTokensApi.v2BroadcastsIdTokensDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdTokensApi - factory interface
 * @export
 */
export const V2BroadcastsIdTokensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdTokensApiFp(configuration)
    return {
        /**
         * 
         * @summary  Removes all tokens related with requested stream
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdTokensDelete(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdTokensDelete(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdTokensApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdTokensApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdTokensApi extends BaseAPI {
    /**
     * 
     * @summary  Removes all tokens related with requested stream
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdTokensApi
     */
    public v2BroadcastsIdTokensDelete(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdTokensApiFp(this.configuration).v2BroadcastsIdTokensDelete(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsIdTokensListOffsetSizeApi - axios parameter creator
 * @export
 */
export const V2BroadcastsIdTokensListOffsetSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the all tokens of requested stream
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdTokensListOffsetSizeGet: async (id: string, offset: string, size: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2BroadcastsIdTokensListOffsetSizeGet', 'id', id)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('v2BroadcastsIdTokensListOffsetSizeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('v2BroadcastsIdTokensListOffsetSizeGet', 'size', size)
            const localVarPath = `/v2/broadcasts/{id}/tokens/list/{offset}/{size}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsIdTokensListOffsetSizeApi - functional programming interface
 * @export
 */
export const V2BroadcastsIdTokensListOffsetSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsIdTokensListOffsetSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the all tokens of requested stream
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsIdTokensListOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsIdTokensListOffsetSizeGet(id, offset, size, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsIdTokensListOffsetSizeApi.v2BroadcastsIdTokensListOffsetSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsIdTokensListOffsetSizeApi - factory interface
 * @export
 */
export const V2BroadcastsIdTokensListOffsetSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsIdTokensListOffsetSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the all tokens of requested stream
         * @param {string} id 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsIdTokensListOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsIdTokensListOffsetSizeGet(id, offset, size, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsIdTokensListOffsetSizeApi - object-oriented interface
 * @export
 * @class V2BroadcastsIdTokensListOffsetSizeApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsIdTokensListOffsetSizeApi extends BaseAPI {
    /**
     * 
     * @summary Get the all tokens of requested stream
     * @param {string} id 
     * @param {string} offset 
     * @param {string} size 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsIdTokensListOffsetSizeApi
     */
    public v2BroadcastsIdTokensListOffsetSizeGet(id: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsIdTokensListOffsetSizeApiFp(this.configuration).v2BroadcastsIdTokensListOffsetSizeGet(id, offset, size, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsImportToStalkerApi - axios parameter creator
 * @export
 */
export const V2BroadcastsImportToStalkerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Import Live Streams to Stalker Portal
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsImportToStalkerPost: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/broadcasts/import-to-stalker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsImportToStalkerApi - functional programming interface
 * @export
 */
export const V2BroadcastsImportToStalkerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsImportToStalkerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Import Live Streams to Stalker Portal
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsImportToStalkerPost(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsImportToStalkerPost(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsImportToStalkerApi.v2BroadcastsImportToStalkerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsImportToStalkerApi - factory interface
 * @export
 */
export const V2BroadcastsImportToStalkerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsImportToStalkerApiFp(configuration)
    return {
        /**
         * 
         * @summary Import Live Streams to Stalker Portal
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsImportToStalkerPost(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsImportToStalkerPost(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsImportToStalkerApi - object-oriented interface
 * @export
 * @class V2BroadcastsImportToStalkerApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsImportToStalkerApi extends BaseAPI {
    /**
     * 
     * @summary Import Live Streams to Stalker Portal
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsImportToStalkerApi
     */
    public v2BroadcastsImportToStalkerPost(accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsImportToStalkerApiFp(this.configuration).v2BroadcastsImportToStalkerPost(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsListOffsetSizeApi - axios parameter creator
 * @export
 */
export const V2BroadcastsListOffsetSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the broadcast list from database. It returns max 50 items at a time
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [typeBy] Type of the stream. Possible values are \&quot;liveStream\&quot;, \&quot;ipCamera\&quot;, \&quot;streamSource\&quot;, \&quot;VoD\&quot;
         * @param {string} [sortBy] Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;, \&quot;status\&quot;
         * @param {string} [orderBy] \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descending order
         * @param {string} [search] Search parameter, returns specific items that contains search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsListOffsetSizeGet: async (offset: string, size: string, accept?: string, typeBy?: string, sortBy?: string, orderBy?: string, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('v2BroadcastsListOffsetSizeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('v2BroadcastsListOffsetSizeGet', 'size', size)
            const localVarPath = `/v2/broadcasts/list/{offset}/{size}`
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (typeBy !== undefined) {
                localVarQueryParameter['type_by'] = typeBy;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsListOffsetSizeApi - functional programming interface
 * @export
 */
export const V2BroadcastsListOffsetSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsListOffsetSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the broadcast list from database. It returns max 50 items at a time
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [typeBy] Type of the stream. Possible values are \&quot;liveStream\&quot;, \&quot;ipCamera\&quot;, \&quot;streamSource\&quot;, \&quot;VoD\&quot;
         * @param {string} [sortBy] Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;, \&quot;status\&quot;
         * @param {string} [orderBy] \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descending order
         * @param {string} [search] Search parameter, returns specific items that contains search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsListOffsetSizeGet(offset: string, size: string, accept?: string, typeBy?: string, sortBy?: string, orderBy?: string, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsListOffsetSizeGet(offset, size, accept, typeBy, sortBy, orderBy, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsListOffsetSizeApi.v2BroadcastsListOffsetSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsListOffsetSizeApi - factory interface
 * @export
 */
export const V2BroadcastsListOffsetSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsListOffsetSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the broadcast list from database. It returns max 50 items at a time
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [typeBy] Type of the stream. Possible values are \&quot;liveStream\&quot;, \&quot;ipCamera\&quot;, \&quot;streamSource\&quot;, \&quot;VoD\&quot;
         * @param {string} [sortBy] Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;, \&quot;status\&quot;
         * @param {string} [orderBy] \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descending order
         * @param {string} [search] Search parameter, returns specific items that contains search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsListOffsetSizeGet(offset: string, size: string, accept?: string, typeBy?: string, sortBy?: string, orderBy?: string, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsListOffsetSizeGet(offset, size, accept, typeBy, sortBy, orderBy, search, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsListOffsetSizeApi - object-oriented interface
 * @export
 * @class V2BroadcastsListOffsetSizeApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsListOffsetSizeApi extends BaseAPI {
    /**
     * 
     * @summary Gets the broadcast list from database. It returns max 50 items at a time
     * @param {string} offset 
     * @param {string} size 
     * @param {string} [accept] 
     * @param {string} [typeBy] Type of the stream. Possible values are \&quot;liveStream\&quot;, \&quot;ipCamera\&quot;, \&quot;streamSource\&quot;, \&quot;VoD\&quot;
     * @param {string} [sortBy] Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;, \&quot;status\&quot;
     * @param {string} [orderBy] \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descending order
     * @param {string} [search] Search parameter, returns specific items that contains search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsListOffsetSizeApi
     */
    public v2BroadcastsListOffsetSizeGet(offset: string, size: string, accept?: string, typeBy?: string, sortBy?: string, orderBy?: string, search?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsListOffsetSizeApiFp(this.configuration).v2BroadcastsListOffsetSizeGet(offset, size, accept, typeBy, sortBy, orderBy, search, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsOnvifDevicesApi - axios parameter creator
 * @export
 */
export const V2BroadcastsOnvifDevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Notes here
         * @summary Get Discovered ONVIF IP Cameras, this service perform a discovery inside of internal network and get automatically  ONVIF enabled camera information
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsOnvifDevicesGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/broadcasts/onvif-devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsOnvifDevicesApi - functional programming interface
 * @export
 */
export const V2BroadcastsOnvifDevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsOnvifDevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Notes here
         * @summary Get Discovered ONVIF IP Cameras, this service perform a discovery inside of internal network and get automatically  ONVIF enabled camera information
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsOnvifDevicesGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsOnvifDevicesGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsOnvifDevicesApi.v2BroadcastsOnvifDevicesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsOnvifDevicesApi - factory interface
 * @export
 */
export const V2BroadcastsOnvifDevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsOnvifDevicesApiFp(configuration)
    return {
        /**
         * Notes here
         * @summary Get Discovered ONVIF IP Cameras, this service perform a discovery inside of internal network and get automatically  ONVIF enabled camera information
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsOnvifDevicesGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsOnvifDevicesGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsOnvifDevicesApi - object-oriented interface
 * @export
 * @class V2BroadcastsOnvifDevicesApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsOnvifDevicesApi extends BaseAPI {
    /**
     * Notes here
     * @summary Get Discovered ONVIF IP Cameras, this service perform a discovery inside of internal network and get automatically  ONVIF enabled camera information
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsOnvifDevicesApi
     */
    public v2BroadcastsOnvifDevicesGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsOnvifDevicesApiFp(this.configuration).v2BroadcastsOnvifDevicesGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsStreamIdIpCameraErrorApi - axios parameter creator
 * @export
 */
export const V2BroadcastsStreamIdIpCameraErrorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Notes here
         * @summary Get IP Camera Error after connection failure. If returns true, it means there is an error. If returns false, there is no error
         * @param {string} streamId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsStreamIdIpCameraErrorGet: async (streamId: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'streamId' is not null or undefined
            assertParamExists('v2BroadcastsStreamIdIpCameraErrorGet', 'streamId', streamId)
            const localVarPath = `/v2/broadcasts/{streamId}/ip-camera-error`
                .replace(`{${"streamId"}}`, encodeURIComponent(String(streamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsStreamIdIpCameraErrorApi - functional programming interface
 * @export
 */
export const V2BroadcastsStreamIdIpCameraErrorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsStreamIdIpCameraErrorApiAxiosParamCreator(configuration)
    return {
        /**
         * Notes here
         * @summary Get IP Camera Error after connection failure. If returns true, it means there is an error. If returns false, there is no error
         * @param {string} streamId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsStreamIdIpCameraErrorGet(streamId: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsStreamIdIpCameraErrorGet(streamId, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsStreamIdIpCameraErrorApi.v2BroadcastsStreamIdIpCameraErrorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsStreamIdIpCameraErrorApi - factory interface
 * @export
 */
export const V2BroadcastsStreamIdIpCameraErrorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsStreamIdIpCameraErrorApiFp(configuration)
    return {
        /**
         * Notes here
         * @summary Get IP Camera Error after connection failure. If returns true, it means there is an error. If returns false, there is no error
         * @param {string} streamId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsStreamIdIpCameraErrorGet(streamId: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsStreamIdIpCameraErrorGet(streamId, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsStreamIdIpCameraErrorApi - object-oriented interface
 * @export
 * @class V2BroadcastsStreamIdIpCameraErrorApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsStreamIdIpCameraErrorApi extends BaseAPI {
    /**
     * Notes here
     * @summary Get IP Camera Error after connection failure. If returns true, it means there is an error. If returns false, there is no error
     * @param {string} streamId 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsStreamIdIpCameraErrorApi
     */
    public v2BroadcastsStreamIdIpCameraErrorGet(streamId: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsStreamIdIpCameraErrorApiFp(this.configuration).v2BroadcastsStreamIdIpCameraErrorGet(streamId, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApi - axios parameter creator
 * @export
 */
export const V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get WebRTC Client Statistics such as : Audio bitrate, Video bitrate, Target bitrate, Video Sent Period etc.
         * @param {string} streamId 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsStreamIdWebrtcClientStatsOffsetSizeGet: async (streamId: string, offset: string, size: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'streamId' is not null or undefined
            assertParamExists('v2BroadcastsStreamIdWebrtcClientStatsOffsetSizeGet', 'streamId', streamId)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('v2BroadcastsStreamIdWebrtcClientStatsOffsetSizeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('v2BroadcastsStreamIdWebrtcClientStatsOffsetSizeGet', 'size', size)
            const localVarPath = `/v2/broadcasts/{stream_id}/webrtc-client-stats/{offset}/{size}`
                .replace(`{${"stream_id"}}`, encodeURIComponent(String(streamId)))
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApi - functional programming interface
 * @export
 */
export const V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get WebRTC Client Statistics such as : Audio bitrate, Video bitrate, Target bitrate, Video Sent Period etc.
         * @param {string} streamId 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsStreamIdWebrtcClientStatsOffsetSizeGet(streamId: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsStreamIdWebrtcClientStatsOffsetSizeGet(streamId, offset, size, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApi.v2BroadcastsStreamIdWebrtcClientStatsOffsetSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApi - factory interface
 * @export
 */
export const V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary Get WebRTC Client Statistics such as : Audio bitrate, Video bitrate, Target bitrate, Video Sent Period etc.
         * @param {string} streamId 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsStreamIdWebrtcClientStatsOffsetSizeGet(streamId: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsStreamIdWebrtcClientStatsOffsetSizeGet(streamId, offset, size, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApi - object-oriented interface
 * @export
 * @class V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApi extends BaseAPI {
    /**
     * 
     * @summary Get WebRTC Client Statistics such as : Audio bitrate, Video bitrate, Target bitrate, Video Sent Period etc.
     * @param {string} streamId 
     * @param {string} offset 
     * @param {string} size 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApi
     */
    public v2BroadcastsStreamIdWebrtcClientStatsOffsetSizeGet(streamId: string, offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsStreamIdWebrtcClientStatsOffsetSizeApiFp(this.configuration).v2BroadcastsStreamIdWebrtcClientStatsOffsetSizeGet(streamId, offset, size, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsTotalBroadcastStatisticsApi - axios parameter creator
 * @export
 */
export const V2BroadcastsTotalBroadcastStatisticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the total broadcast live statistics total HLS watcher count, total WebRTC watcher count
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsTotalBroadcastStatisticsGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/broadcasts/total-broadcast-statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsTotalBroadcastStatisticsApi - functional programming interface
 * @export
 */
export const V2BroadcastsTotalBroadcastStatisticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsTotalBroadcastStatisticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the total broadcast live statistics total HLS watcher count, total WebRTC watcher count
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsTotalBroadcastStatisticsGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsTotalBroadcastStatisticsGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsTotalBroadcastStatisticsApi.v2BroadcastsTotalBroadcastStatisticsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsTotalBroadcastStatisticsApi - factory interface
 * @export
 */
export const V2BroadcastsTotalBroadcastStatisticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsTotalBroadcastStatisticsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the total broadcast live statistics total HLS watcher count, total WebRTC watcher count
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsTotalBroadcastStatisticsGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsTotalBroadcastStatisticsGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsTotalBroadcastStatisticsApi - object-oriented interface
 * @export
 * @class V2BroadcastsTotalBroadcastStatisticsApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsTotalBroadcastStatisticsApi extends BaseAPI {
    /**
     * 
     * @summary Get the total broadcast live statistics total HLS watcher count, total WebRTC watcher count
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsTotalBroadcastStatisticsApi
     */
    public v2BroadcastsTotalBroadcastStatisticsGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsTotalBroadcastStatisticsApiFp(this.configuration).v2BroadcastsTotalBroadcastStatisticsGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsValidateTokenApi - axios parameter creator
 * @export
 */
export const V2BroadcastsValidateTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Perform validation of token for requested stream. If validated, success field is true, not validated success field false
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsValidateTokenPost: async (contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/broadcasts/validate-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsValidateTokenApi - functional programming interface
 * @export
 */
export const V2BroadcastsValidateTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsValidateTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Perform validation of token for requested stream. If validated, success field is true, not validated success field false
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsValidateTokenPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsValidateTokenPost(contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsValidateTokenApi.v2BroadcastsValidateTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsValidateTokenApi - factory interface
 * @export
 */
export const V2BroadcastsValidateTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsValidateTokenApiFp(configuration)
    return {
        /**
         * 
         * @summary Perform validation of token for requested stream. If validated, success field is true, not validated success field false
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsValidateTokenPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsValidateTokenPost(contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsValidateTokenApi - object-oriented interface
 * @export
 * @class V2BroadcastsValidateTokenApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsValidateTokenApi extends BaseAPI {
    /**
     * 
     * @summary Perform validation of token for requested stream. If validated, success field is true, not validated success field false
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsValidateTokenApi
     */
    public v2BroadcastsValidateTokenPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2BroadcastsValidateTokenApiFp(this.configuration).v2BroadcastsValidateTokenPost(contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsWebrtcReceiveLowLevelStatsApi - axios parameter creator
 * @export
 */
export const V2BroadcastsWebrtcReceiveLowLevelStatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get WebRTC Low Level receive stats in general
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsWebrtcReceiveLowLevelStatsGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/broadcasts/webrtc-receive-low-level-stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsWebrtcReceiveLowLevelStatsApi - functional programming interface
 * @export
 */
export const V2BroadcastsWebrtcReceiveLowLevelStatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsWebrtcReceiveLowLevelStatsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get WebRTC Low Level receive stats in general
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsWebrtcReceiveLowLevelStatsGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsWebrtcReceiveLowLevelStatsGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsWebrtcReceiveLowLevelStatsApi.v2BroadcastsWebrtcReceiveLowLevelStatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsWebrtcReceiveLowLevelStatsApi - factory interface
 * @export
 */
export const V2BroadcastsWebrtcReceiveLowLevelStatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsWebrtcReceiveLowLevelStatsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get WebRTC Low Level receive stats in general
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsWebrtcReceiveLowLevelStatsGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsWebrtcReceiveLowLevelStatsGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsWebrtcReceiveLowLevelStatsApi - object-oriented interface
 * @export
 * @class V2BroadcastsWebrtcReceiveLowLevelStatsApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsWebrtcReceiveLowLevelStatsApi extends BaseAPI {
    /**
     * 
     * @summary Get WebRTC Low Level receive stats in general
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsWebrtcReceiveLowLevelStatsApi
     */
    public v2BroadcastsWebrtcReceiveLowLevelStatsGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsWebrtcReceiveLowLevelStatsApiFp(this.configuration).v2BroadcastsWebrtcReceiveLowLevelStatsGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsWebrtcSendLowLevelStatsApi - axios parameter creator
 * @export
 */
export const V2BroadcastsWebrtcSendLowLevelStatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get WebRTC Low Level Send stats in general
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsWebrtcSendLowLevelStatsGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/broadcasts/webrtc-send-low-level-stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsWebrtcSendLowLevelStatsApi - functional programming interface
 * @export
 */
export const V2BroadcastsWebrtcSendLowLevelStatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsWebrtcSendLowLevelStatsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get WebRTC Low Level Send stats in general
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsWebrtcSendLowLevelStatsGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsWebrtcSendLowLevelStatsGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsWebrtcSendLowLevelStatsApi.v2BroadcastsWebrtcSendLowLevelStatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsWebrtcSendLowLevelStatsApi - factory interface
 * @export
 */
export const V2BroadcastsWebrtcSendLowLevelStatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsWebrtcSendLowLevelStatsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get WebRTC Low Level Send stats in general
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsWebrtcSendLowLevelStatsGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsWebrtcSendLowLevelStatsGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsWebrtcSendLowLevelStatsApi - object-oriented interface
 * @export
 * @class V2BroadcastsWebrtcSendLowLevelStatsApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsWebrtcSendLowLevelStatsApi extends BaseAPI {
    /**
     * 
     * @summary Get WebRTC Low Level Send stats in general
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsWebrtcSendLowLevelStatsApi
     */
    public v2BroadcastsWebrtcSendLowLevelStatsGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsWebrtcSendLowLevelStatsApiFp(this.configuration).v2BroadcastsWebrtcSendLowLevelStatsGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsWebrtcViewersListOffsetSizeApi - axios parameter creator
 * @export
 */
export const V2BroadcastsWebrtcViewersListOffsetSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get Web RTC Viewer List
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [sortBy] field to sort
         * @param {string} [orderBy] asc for Ascending, desc Descending order
         * @param {string} [search] Search parameter, returns specific items that contains search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsWebrtcViewersListOffsetSizeGet: async (offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('v2BroadcastsWebrtcViewersListOffsetSizeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('v2BroadcastsWebrtcViewersListOffsetSizeGet', 'size', size)
            const localVarPath = `/v2/broadcasts/webrtc-viewers/list/{offset}/{size}`
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsWebrtcViewersListOffsetSizeApi - functional programming interface
 * @export
 */
export const V2BroadcastsWebrtcViewersListOffsetSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsWebrtcViewersListOffsetSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get Web RTC Viewer List
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [sortBy] field to sort
         * @param {string} [orderBy] asc for Ascending, desc Descending order
         * @param {string} [search] Search parameter, returns specific items that contains search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsWebrtcViewersListOffsetSizeGet(offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsWebrtcViewersListOffsetSizeGet(offset, size, accept, sortBy, orderBy, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsWebrtcViewersListOffsetSizeApi.v2BroadcastsWebrtcViewersListOffsetSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsWebrtcViewersListOffsetSizeApi - factory interface
 * @export
 */
export const V2BroadcastsWebrtcViewersListOffsetSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsWebrtcViewersListOffsetSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary get Web RTC Viewer List
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [sortBy] field to sort
         * @param {string} [orderBy] asc for Ascending, desc Descending order
         * @param {string} [search] Search parameter, returns specific items that contains search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsWebrtcViewersListOffsetSizeGet(offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsWebrtcViewersListOffsetSizeGet(offset, size, accept, sortBy, orderBy, search, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsWebrtcViewersListOffsetSizeApi - object-oriented interface
 * @export
 * @class V2BroadcastsWebrtcViewersListOffsetSizeApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsWebrtcViewersListOffsetSizeApi extends BaseAPI {
    /**
     * 
     * @summary get Web RTC Viewer List
     * @param {string} offset 
     * @param {string} size 
     * @param {string} [accept] 
     * @param {string} [sortBy] field to sort
     * @param {string} [orderBy] asc for Ascending, desc Descending order
     * @param {string} [search] Search parameter, returns specific items that contains search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsWebrtcViewersListOffsetSizeApi
     */
    public v2BroadcastsWebrtcViewersListOffsetSizeGet(offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, search?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsWebrtcViewersListOffsetSizeApiFp(this.configuration).v2BroadcastsWebrtcViewersListOffsetSizeGet(offset, size, accept, sortBy, orderBy, search, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2BroadcastsWebrtcViewersWebrtcViewerIdStopApi - axios parameter creator
 * @export
 */
export const V2BroadcastsWebrtcViewersWebrtcViewerIdStopApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Stop player with a specified id
         * @param {string} webrtcViewerId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsWebrtcViewersWebrtcViewerIdStopPost: async (webrtcViewerId: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webrtcViewerId' is not null or undefined
            assertParamExists('v2BroadcastsWebrtcViewersWebrtcViewerIdStopPost', 'webrtcViewerId', webrtcViewerId)
            const localVarPath = `/v2/broadcasts/webrtc-viewers/{webrtc-viewer-id}/stop`
                .replace(`{${"webrtc-viewer-id"}}`, encodeURIComponent(String(webrtcViewerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2BroadcastsWebrtcViewersWebrtcViewerIdStopApi - functional programming interface
 * @export
 */
export const V2BroadcastsWebrtcViewersWebrtcViewerIdStopApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2BroadcastsWebrtcViewersWebrtcViewerIdStopApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Stop player with a specified id
         * @param {string} webrtcViewerId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2BroadcastsWebrtcViewersWebrtcViewerIdStopPost(webrtcViewerId: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2BroadcastsWebrtcViewersWebrtcViewerIdStopPost(webrtcViewerId, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2BroadcastsWebrtcViewersWebrtcViewerIdStopApi.v2BroadcastsWebrtcViewersWebrtcViewerIdStopPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2BroadcastsWebrtcViewersWebrtcViewerIdStopApi - factory interface
 * @export
 */
export const V2BroadcastsWebrtcViewersWebrtcViewerIdStopApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2BroadcastsWebrtcViewersWebrtcViewerIdStopApiFp(configuration)
    return {
        /**
         * 
         * @summary Stop player with a specified id
         * @param {string} webrtcViewerId 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2BroadcastsWebrtcViewersWebrtcViewerIdStopPost(webrtcViewerId: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2BroadcastsWebrtcViewersWebrtcViewerIdStopPost(webrtcViewerId, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2BroadcastsWebrtcViewersWebrtcViewerIdStopApi - object-oriented interface
 * @export
 * @class V2BroadcastsWebrtcViewersWebrtcViewerIdStopApi
 * @extends {BaseAPI}
 */
export class V2BroadcastsWebrtcViewersWebrtcViewerIdStopApi extends BaseAPI {
    /**
     * 
     * @summary Stop player with a specified id
     * @param {string} webrtcViewerId 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2BroadcastsWebrtcViewersWebrtcViewerIdStopApi
     */
    public v2BroadcastsWebrtcViewersWebrtcViewerIdStopPost(webrtcViewerId: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2BroadcastsWebrtcViewersWebrtcViewerIdStopApiFp(this.configuration).v2BroadcastsWebrtcViewersWebrtcViewerIdStopPost(webrtcViewerId, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ClusterModeStatusApi - axios parameter creator
 * @export
 */
export const V2ClusterModeStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the server mode. If it is in the cluster mode, result will be true.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ClusterModeStatusGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/cluster-mode-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ClusterModeStatusApi - functional programming interface
 * @export
 */
export const V2ClusterModeStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ClusterModeStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the server mode. If it is in the cluster mode, result will be true.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ClusterModeStatusGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ClusterModeStatusGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ClusterModeStatusApi.v2ClusterModeStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ClusterModeStatusApi - factory interface
 * @export
 */
export const V2ClusterModeStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ClusterModeStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the server mode. If it is in the cluster mode, result will be true.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ClusterModeStatusGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ClusterModeStatusGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ClusterModeStatusApi - object-oriented interface
 * @export
 * @class V2ClusterModeStatusApi
 * @extends {BaseAPI}
 */
export class V2ClusterModeStatusApi extends BaseAPI {
    /**
     * 
     * @summary Returns the server mode. If it is in the cluster mode, result will be true.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ClusterModeStatusApi
     */
    public v2ClusterModeStatusGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2ClusterModeStatusApiFp(this.configuration).v2ClusterModeStatusGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ClusterNodeCountApi - axios parameter creator
 * @export
 */
export const V2ClusterNodeCountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get Node Count
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ClusterNodeCountGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/cluster/node-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ClusterNodeCountApi - functional programming interface
 * @export
 */
export const V2ClusterNodeCountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ClusterNodeCountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get Node Count
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ClusterNodeCountGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ClusterNodeCountGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ClusterNodeCountApi.v2ClusterNodeCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ClusterNodeCountApi - factory interface
 * @export
 */
export const V2ClusterNodeCountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ClusterNodeCountApiFp(configuration)
    return {
        /**
         * 
         * @summary get Node Count
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ClusterNodeCountGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.v2ClusterNodeCountGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ClusterNodeCountApi - object-oriented interface
 * @export
 * @class V2ClusterNodeCountApi
 * @extends {BaseAPI}
 */
export class V2ClusterNodeCountApi extends BaseAPI {
    /**
     * 
     * @summary get Node Count
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ClusterNodeCountApi
     */
    public v2ClusterNodeCountGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2ClusterNodeCountApiFp(this.configuration).v2ClusterNodeCountGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ClusterNodeIdApi - axios parameter creator
 * @export
 */
export const V2ClusterNodeIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete Node
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ClusterNodeIdDelete: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2ClusterNodeIdDelete', 'id', id)
            const localVarPath = `/v2/cluster/node/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ClusterNodeIdApi - functional programming interface
 * @export
 */
export const V2ClusterNodeIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ClusterNodeIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete Node
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ClusterNodeIdDelete(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ClusterNodeIdDelete(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ClusterNodeIdApi.v2ClusterNodeIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ClusterNodeIdApi - factory interface
 * @export
 */
export const V2ClusterNodeIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ClusterNodeIdApiFp(configuration)
    return {
        /**
         * 
         * @summary delete Node
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ClusterNodeIdDelete(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ClusterNodeIdDelete(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ClusterNodeIdApi - object-oriented interface
 * @export
 * @class V2ClusterNodeIdApi
 * @extends {BaseAPI}
 */
export class V2ClusterNodeIdApi extends BaseAPI {
    /**
     * 
     * @summary delete Node
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ClusterNodeIdApi
     */
    public v2ClusterNodeIdDelete(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2ClusterNodeIdApiFp(this.configuration).v2ClusterNodeIdDelete(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ClusterNodesOffsetSizeApi - axios parameter creator
 * @export
 */
export const V2ClusterNodesOffsetSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get Node List
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ClusterNodesOffsetSizeGet: async (offset: string, size: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('v2ClusterNodesOffsetSizeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('v2ClusterNodesOffsetSizeGet', 'size', size)
            const localVarPath = `/v2/cluster/nodes/{offset}/{size}`
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ClusterNodesOffsetSizeApi - functional programming interface
 * @export
 */
export const V2ClusterNodesOffsetSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ClusterNodesOffsetSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get Node List
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ClusterNodesOffsetSizeGet(offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ClusterNodesOffsetSizeGet(offset, size, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ClusterNodesOffsetSizeApi.v2ClusterNodesOffsetSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ClusterNodesOffsetSizeApi - factory interface
 * @export
 */
export const V2ClusterNodesOffsetSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ClusterNodesOffsetSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary get Node List
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ClusterNodesOffsetSizeGet(offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ClusterNodesOffsetSizeGet(offset, size, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ClusterNodesOffsetSizeApi - object-oriented interface
 * @export
 * @class V2ClusterNodesOffsetSizeApi
 * @extends {BaseAPI}
 */
export class V2ClusterNodesOffsetSizeApi extends BaseAPI {
    /**
     * 
     * @summary get Node List
     * @param {string} offset 
     * @param {string} size 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ClusterNodesOffsetSizeApi
     */
    public v2ClusterNodesOffsetSizeGet(offset: string, size: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2ClusterNodesOffsetSizeApiFp(this.configuration).v2ClusterNodesOffsetSizeGet(offset, size, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2CpuStatusApi - axios parameter creator
 * @export
 */
export const V2CpuStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns system cpu load, process cpu load and process cpu time.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2CpuStatusGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/cpu-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2CpuStatusApi - functional programming interface
 * @export
 */
export const V2CpuStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2CpuStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns system cpu load, process cpu load and process cpu time.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2CpuStatusGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2CpuStatusGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2CpuStatusApi.v2CpuStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2CpuStatusApi - factory interface
 * @export
 */
export const V2CpuStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2CpuStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns system cpu load, process cpu load and process cpu time.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2CpuStatusGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2CpuStatusGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2CpuStatusApi - object-oriented interface
 * @export
 * @class V2CpuStatusApi
 * @extends {BaseAPI}
 */
export class V2CpuStatusApi extends BaseAPI {
    /**
     * 
     * @summary Returns system cpu load, process cpu load and process cpu time.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2CpuStatusApi
     */
    public v2CpuStatusGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2CpuStatusApiFp(this.configuration).v2CpuStatusGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2EnterpriseEditionApi - axios parameter creator
 * @export
 */
export const V2EnterpriseEditionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns true if the server is enterprise edition.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2EnterpriseEditionGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/enterprise-edition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2EnterpriseEditionApi - functional programming interface
 * @export
 */
export const V2EnterpriseEditionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2EnterpriseEditionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns true if the server is enterprise edition.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2EnterpriseEditionGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2EnterpriseEditionGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2EnterpriseEditionApi.v2EnterpriseEditionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2EnterpriseEditionApi - factory interface
 * @export
 */
export const V2EnterpriseEditionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2EnterpriseEditionApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns true if the server is enterprise edition.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2EnterpriseEditionGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2EnterpriseEditionGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2EnterpriseEditionApi - object-oriented interface
 * @export
 * @class V2EnterpriseEditionApi
 * @extends {BaseAPI}
 */
export class V2EnterpriseEditionApi extends BaseAPI {
    /**
     * 
     * @summary Returns true if the server is enterprise edition.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2EnterpriseEditionApi
     */
    public v2EnterpriseEditionGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2EnterpriseEditionApiFp(this.configuration).v2EnterpriseEditionGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2FileSystemStatusApi - axios parameter creator
 * @export
 */
export const V2FileSystemStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets system file status. Returns usable space, total space, available space and in use space.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FileSystemStatusGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/file-system-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2FileSystemStatusApi - functional programming interface
 * @export
 */
export const V2FileSystemStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2FileSystemStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets system file status. Returns usable space, total space, available space and in use space.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2FileSystemStatusGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2FileSystemStatusGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2FileSystemStatusApi.v2FileSystemStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2FileSystemStatusApi - factory interface
 * @export
 */
export const V2FileSystemStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2FileSystemStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets system file status. Returns usable space, total space, available space and in use space.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FileSystemStatusGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2FileSystemStatusGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2FileSystemStatusApi - object-oriented interface
 * @export
 * @class V2FileSystemStatusApi
 * @extends {BaseAPI}
 */
export class V2FileSystemStatusApi extends BaseAPI {
    /**
     * 
     * @summary Gets system file status. Returns usable space, total space, available space and in use space.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2FileSystemStatusApi
     */
    public v2FileSystemStatusGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2FileSystemStatusApiFp(this.configuration).v2FileSystemStatusGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2FirstLoginStatusApi - axios parameter creator
 * @export
 */
export const V2FirstLoginStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Checks first login status. If server being logged in first time, it returns true, otherwise false.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FirstLoginStatusGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/first-login-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2FirstLoginStatusApi - functional programming interface
 * @export
 */
export const V2FirstLoginStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2FirstLoginStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Checks first login status. If server being logged in first time, it returns true, otherwise false.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2FirstLoginStatusGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2FirstLoginStatusGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2FirstLoginStatusApi.v2FirstLoginStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2FirstLoginStatusApi - factory interface
 * @export
 */
export const V2FirstLoginStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2FirstLoginStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Checks first login status. If server being logged in first time, it returns true, otherwise false.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FirstLoginStatusGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2FirstLoginStatusGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2FirstLoginStatusApi - object-oriented interface
 * @export
 * @class V2FirstLoginStatusApi
 * @extends {BaseAPI}
 */
export class V2FirstLoginStatusApi extends BaseAPI {
    /**
     * 
     * @summary Checks first login status. If server being logged in first time, it returns true, otherwise false.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2FirstLoginStatusApi
     */
    public v2FirstLoginStatusGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2FirstLoginStatusApiFp(this.configuration).v2FirstLoginStatusGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2GpuStatusApi - axios parameter creator
 * @export
 */
export const V2GpuStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets GPU information. Returns whether you have GPU or not. If yes, information of the gpu and the number of total gpus.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2GpuStatusGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/gpu-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2GpuStatusApi - functional programming interface
 * @export
 */
export const V2GpuStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2GpuStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets GPU information. Returns whether you have GPU or not. If yes, information of the gpu and the number of total gpus.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2GpuStatusGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2GpuStatusGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2GpuStatusApi.v2GpuStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2GpuStatusApi - factory interface
 * @export
 */
export const V2GpuStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2GpuStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets GPU information. Returns whether you have GPU or not. If yes, information of the gpu and the number of total gpus.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2GpuStatusGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2GpuStatusGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2GpuStatusApi - object-oriented interface
 * @export
 * @class V2GpuStatusApi
 * @extends {BaseAPI}
 */
export class V2GpuStatusApi extends BaseAPI {
    /**
     * 
     * @summary Gets GPU information. Returns whether you have GPU or not. If yes, information of the gpu and the number of total gpus.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2GpuStatusApi
     */
    public v2GpuStatusGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2GpuStatusApiFp(this.configuration).v2GpuStatusGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2HeapDumpApi - axios parameter creator
 * @export
 */
export const V2HeapDumpApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns heap dump.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2HeapDumpGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/heap-dump`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2HeapDumpApi - functional programming interface
 * @export
 */
export const V2HeapDumpApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2HeapDumpApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns heap dump.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2HeapDumpGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2HeapDumpGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2HeapDumpApi.v2HeapDumpGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2HeapDumpApi - factory interface
 * @export
 */
export const V2HeapDumpApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2HeapDumpApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns heap dump.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2HeapDumpGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.v2HeapDumpGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2HeapDumpApi - object-oriented interface
 * @export
 * @class V2HeapDumpApi
 * @extends {BaseAPI}
 */
export class V2HeapDumpApi extends BaseAPI {
    /**
     * 
     * @summary Returns heap dump.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2HeapDumpApi
     */
    public v2HeapDumpGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2HeapDumpApiFp(this.configuration).v2HeapDumpGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2JvmMemoryStatusApi - axios parameter creator
 * @export
 */
export const V2JvmMemoryStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns JVM memory informations. Max, total, free, in-use and available processors are returned.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2JvmMemoryStatusGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/jvm-memory-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2JvmMemoryStatusApi - functional programming interface
 * @export
 */
export const V2JvmMemoryStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2JvmMemoryStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns JVM memory informations. Max, total, free, in-use and available processors are returned.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2JvmMemoryStatusGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2JvmMemoryStatusGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2JvmMemoryStatusApi.v2JvmMemoryStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2JvmMemoryStatusApi - factory interface
 * @export
 */
export const V2JvmMemoryStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2JvmMemoryStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns JVM memory informations. Max, total, free, in-use and available processors are returned.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2JvmMemoryStatusGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2JvmMemoryStatusGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2JvmMemoryStatusApi - object-oriented interface
 * @export
 * @class V2JvmMemoryStatusApi
 * @extends {BaseAPI}
 */
export class V2JvmMemoryStatusApi extends BaseAPI {
    /**
     * 
     * @summary Returns JVM memory informations. Max, total, free, in-use and available processors are returned.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2JvmMemoryStatusApi
     */
    public v2JvmMemoryStatusGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2JvmMemoryStatusApiFp(this.configuration).v2JvmMemoryStatusGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2LastLicenceStatusApi - axios parameter creator
 * @export
 */
export const V2LastLicenceStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the last checked license status. Includes license ID, owner, start date, end date, type and license count.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2LastLicenceStatusGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/last-licence-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2LastLicenceStatusApi - functional programming interface
 * @export
 */
export const V2LastLicenceStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2LastLicenceStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the last checked license status. Includes license ID, owner, start date, end date, type and license count.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2LastLicenceStatusGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2LastLicenceStatusGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2LastLicenceStatusApi.v2LastLicenceStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2LastLicenceStatusApi - factory interface
 * @export
 */
export const V2LastLicenceStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2LastLicenceStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the last checked license status. Includes license ID, owner, start date, end date, type and license count.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2LastLicenceStatusGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2LastLicenceStatusGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2LastLicenceStatusApi - object-oriented interface
 * @export
 * @class V2LastLicenceStatusApi
 * @extends {BaseAPI}
 */
export class V2LastLicenceStatusApi extends BaseAPI {
    /**
     * 
     * @summary Returns the last checked license status. Includes license ID, owner, start date, end date, type and license count.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2LastLicenceStatusApi
     */
    public v2LastLicenceStatusGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2LastLicenceStatusApiFp(this.configuration).v2LastLicenceStatusGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2LicenceStatusApi - axios parameter creator
 * @export
 */
export const V2LicenceStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns license status. Includes license ID, status, owner, start date, end date, type and license count.
         * @param {string} [accept] 
         * @param {string} [key] (Required) License key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2LicenceStatusGet: async (accept?: string, key?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/licence-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2LicenceStatusApi - functional programming interface
 * @export
 */
export const V2LicenceStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2LicenceStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns license status. Includes license ID, status, owner, start date, end date, type and license count.
         * @param {string} [accept] 
         * @param {string} [key] (Required) License key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2LicenceStatusGet(accept?: string, key?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2LicenceStatusGet(accept, key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2LicenceStatusApi.v2LicenceStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2LicenceStatusApi - factory interface
 * @export
 */
export const V2LicenceStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2LicenceStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns license status. Includes license ID, status, owner, start date, end date, type and license count.
         * @param {string} [accept] 
         * @param {string} [key] (Required) License key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2LicenceStatusGet(accept?: string, key?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2LicenceStatusGet(accept, key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2LicenceStatusApi - object-oriented interface
 * @export
 * @class V2LicenceStatusApi
 * @extends {BaseAPI}
 */
export class V2LicenceStatusApi extends BaseAPI {
    /**
     * 
     * @summary Returns license status. Includes license ID, status, owner, start date, end date, type and license count.
     * @param {string} [accept] 
     * @param {string} [key] (Required) License key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2LicenceStatusApi
     */
    public v2LicenceStatusGet(accept?: string, key?: string, options?: RawAxiosRequestConfig) {
        return V2LicenceStatusApiFp(this.configuration).v2LicenceStatusGet(accept, key, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2LiveClientsSizeApi - axios parameter creator
 * @export
 */
export const V2LiveClientsSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns total number of live streams and total number of connections.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2LiveClientsSizeGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/live-clients-size`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2LiveClientsSizeApi - functional programming interface
 * @export
 */
export const V2LiveClientsSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2LiveClientsSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns total number of live streams and total number of connections.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2LiveClientsSizeGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2LiveClientsSizeGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2LiveClientsSizeApi.v2LiveClientsSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2LiveClientsSizeApi - factory interface
 * @export
 */
export const V2LiveClientsSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2LiveClientsSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns total number of live streams and total number of connections.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2LiveClientsSizeGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2LiveClientsSizeGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2LiveClientsSizeApi - object-oriented interface
 * @export
 * @class V2LiveClientsSizeApi
 * @extends {BaseAPI}
 */
export class V2LiveClientsSizeApi extends BaseAPI {
    /**
     * 
     * @summary Returns total number of live streams and total number of connections.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2LiveClientsSizeApi
     */
    public v2LiveClientsSizeGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2LiveClientsSizeApiFp(this.configuration).v2LiveClientsSizeGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2LivenessApi - axios parameter creator
 * @export
 */
export const V2LivenessApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the hostname to check liveness with HTTP type healthcheck.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2LivenessGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/liveness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2LivenessApi - functional programming interface
 * @export
 */
export const V2LivenessApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2LivenessApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the hostname to check liveness with HTTP type healthcheck.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2LivenessGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2LivenessGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2LivenessApi.v2LivenessGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2LivenessApi - factory interface
 * @export
 */
export const V2LivenessApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2LivenessApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the hostname to check liveness with HTTP type healthcheck.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2LivenessGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v2LivenessGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2LivenessApi - object-oriented interface
 * @export
 * @class V2LivenessApi
 * @extends {BaseAPI}
 */
export class V2LivenessApi extends BaseAPI {
    /**
     * 
     * @summary Returns the hostname to check liveness with HTTP type healthcheck.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2LivenessApi
     */
    public v2LivenessGet(options?: RawAxiosRequestConfig) {
        return V2LivenessApiFp(this.configuration).v2LivenessGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2LogFileOffsetSizeCharSizeApi - axios parameter creator
 * @export
 */
export const V2LogFileOffsetSizeCharSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets log file. Char size of the log, offset or log type can be specified.
         * @param {string} offsetSize 
         * @param {string} charSize 
         * @param {string} [accept] 
         * @param {string} [logType] (Required) Log type. ERROR can be used to get only error logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2LogFileOffsetSizeCharSizeGet: async (offsetSize: string, charSize: string, accept?: string, logType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offsetSize' is not null or undefined
            assertParamExists('v2LogFileOffsetSizeCharSizeGet', 'offsetSize', offsetSize)
            // verify required parameter 'charSize' is not null or undefined
            assertParamExists('v2LogFileOffsetSizeCharSizeGet', 'charSize', charSize)
            const localVarPath = `/v2/log-file/{offsetSize}/{charSize}`
                .replace(`{${"offsetSize"}}`, encodeURIComponent(String(offsetSize)))
                .replace(`{${"charSize"}}`, encodeURIComponent(String(charSize)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (logType !== undefined) {
                localVarQueryParameter['logType'] = logType;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2LogFileOffsetSizeCharSizeApi - functional programming interface
 * @export
 */
export const V2LogFileOffsetSizeCharSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2LogFileOffsetSizeCharSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets log file. Char size of the log, offset or log type can be specified.
         * @param {string} offsetSize 
         * @param {string} charSize 
         * @param {string} [accept] 
         * @param {string} [logType] (Required) Log type. ERROR can be used to get only error logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2LogFileOffsetSizeCharSizeGet(offsetSize: string, charSize: string, accept?: string, logType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2LogFileOffsetSizeCharSizeGet(offsetSize, charSize, accept, logType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2LogFileOffsetSizeCharSizeApi.v2LogFileOffsetSizeCharSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2LogFileOffsetSizeCharSizeApi - factory interface
 * @export
 */
export const V2LogFileOffsetSizeCharSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2LogFileOffsetSizeCharSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets log file. Char size of the log, offset or log type can be specified.
         * @param {string} offsetSize 
         * @param {string} charSize 
         * @param {string} [accept] 
         * @param {string} [logType] (Required) Log type. ERROR can be used to get only error logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2LogFileOffsetSizeCharSizeGet(offsetSize: string, charSize: string, accept?: string, logType?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2LogFileOffsetSizeCharSizeGet(offsetSize, charSize, accept, logType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2LogFileOffsetSizeCharSizeApi - object-oriented interface
 * @export
 * @class V2LogFileOffsetSizeCharSizeApi
 * @extends {BaseAPI}
 */
export class V2LogFileOffsetSizeCharSizeApi extends BaseAPI {
    /**
     * 
     * @summary Gets log file. Char size of the log, offset or log type can be specified.
     * @param {string} offsetSize 
     * @param {string} charSize 
     * @param {string} [accept] 
     * @param {string} [logType] (Required) Log type. ERROR can be used to get only error logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2LogFileOffsetSizeCharSizeApi
     */
    public v2LogFileOffsetSizeCharSizeGet(offsetSize: string, charSize: string, accept?: string, logType?: string, options?: RawAxiosRequestConfig) {
        return V2LogFileOffsetSizeCharSizeApiFp(this.configuration).v2LogFileOffsetSizeCharSizeGet(offsetSize, charSize, accept, logType, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ServerSettingsApi - axios parameter creator
 * @export
 */
export const V2ServerSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the server settings. From log level to measurement period of cpu, license key of the server host address,ssl configuration and many more settings are returned at once.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ServerSettingsGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/server-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Changes server settings. Sets Server Name, license key, market build status and node group.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ServerSettingsPost: async (contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/server-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ServerSettingsApi - functional programming interface
 * @export
 */
export const V2ServerSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ServerSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the server settings. From log level to measurement period of cpu, license key of the server host address,ssl configuration and many more settings are returned at once.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ServerSettingsGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ServerSettingsGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ServerSettingsApi.v2ServerSettingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Changes server settings. Sets Server Name, license key, market build status and node group.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ServerSettingsPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ServerSettingsPost(contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ServerSettingsApi.v2ServerSettingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ServerSettingsApi - factory interface
 * @export
 */
export const V2ServerSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ServerSettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the server settings. From log level to measurement period of cpu, license key of the server host address,ssl configuration and many more settings are returned at once.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ServerSettingsGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ServerSettingsGet(accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Changes server settings. Sets Server Name, license key, market build status and node group.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ServerSettingsPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ServerSettingsPost(contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ServerSettingsApi - object-oriented interface
 * @export
 * @class V2ServerSettingsApi
 * @extends {BaseAPI}
 */
export class V2ServerSettingsApi extends BaseAPI {
    /**
     * 
     * @summary Returns the server settings. From log level to measurement period of cpu, license key of the server host address,ssl configuration and many more settings are returned at once.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ServerSettingsApi
     */
    public v2ServerSettingsGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2ServerSettingsApiFp(this.configuration).v2ServerSettingsGet(accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Changes server settings. Sets Server Name, license key, market build status and node group.
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ServerSettingsApi
     */
    public v2ServerSettingsPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2ServerSettingsApiFp(this.configuration).v2ServerSettingsPost(contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ServerTimeApi - axios parameter creator
 * @export
 */
export const V2ServerTimeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets server time. Returns server uptime and start time in milliseconds in JSON.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ServerTimeGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/server-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ServerTimeApi - functional programming interface
 * @export
 */
export const V2ServerTimeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ServerTimeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets server time. Returns server uptime and start time in milliseconds in JSON.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ServerTimeGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ServerTimeGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ServerTimeApi.v2ServerTimeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ServerTimeApi - factory interface
 * @export
 */
export const V2ServerTimeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ServerTimeApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets server time. Returns server uptime and start time in milliseconds in JSON.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ServerTimeGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ServerTimeGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ServerTimeApi - object-oriented interface
 * @export
 * @class V2ServerTimeApi
 * @extends {BaseAPI}
 */
export class V2ServerTimeApi extends BaseAPI {
    /**
     * 
     * @summary Gets server time. Returns server uptime and start time in milliseconds in JSON.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ServerTimeApi
     */
    public v2ServerTimeGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2ServerTimeApiFp(this.configuration).v2ServerTimeGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ShutdownProperStatusApi - axios parameter creator
 * @export
 */
export const V2ShutdownProperStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Checks whether application or applications have shutdown properly or not.
         * @param {string} [accept] 
         * @param {string} [appNames] (Required) Application name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ShutdownProperStatusGet: async (accept?: string, appNames?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/shutdown-proper-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appNames !== undefined) {
                localVarQueryParameter['appNames'] = appNames;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ShutdownProperStatusApi - functional programming interface
 * @export
 */
export const V2ShutdownProperStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ShutdownProperStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Checks whether application or applications have shutdown properly or not.
         * @param {string} [accept] 
         * @param {string} [appNames] (Required) Application name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ShutdownProperStatusGet(accept?: string, appNames?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ShutdownProperStatusGet(accept, appNames, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ShutdownProperStatusApi.v2ShutdownProperStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ShutdownProperStatusApi - factory interface
 * @export
 */
export const V2ShutdownProperStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ShutdownProperStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Checks whether application or applications have shutdown properly or not.
         * @param {string} [accept] 
         * @param {string} [appNames] (Required) Application name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ShutdownProperStatusGet(accept?: string, appNames?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ShutdownProperStatusGet(accept, appNames, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ShutdownProperStatusApi - object-oriented interface
 * @export
 * @class V2ShutdownProperStatusApi
 * @extends {BaseAPI}
 */
export class V2ShutdownProperStatusApi extends BaseAPI {
    /**
     * 
     * @summary Checks whether application or applications have shutdown properly or not.
     * @param {string} [accept] 
     * @param {string} [appNames] (Required) Application name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ShutdownProperStatusApi
     */
    public v2ShutdownProperStatusGet(accept?: string, appNames?: string, options?: RawAxiosRequestConfig) {
        return V2ShutdownProperStatusApiFp(this.configuration).v2ShutdownProperStatusGet(accept, appNames, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ShutdownProperlyApi - axios parameter creator
 * @export
 */
export const V2ShutdownProperlyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Set application or applications shutdown property to true
         * @param {string} [accept] 
         * @param {string} [appNames] (Required) Application name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ShutdownProperlyGet: async (accept?: string, appNames?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/shutdown-properly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appNames !== undefined) {
                localVarQueryParameter['appNames'] = appNames;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ShutdownProperlyApi - functional programming interface
 * @export
 */
export const V2ShutdownProperlyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ShutdownProperlyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Set application or applications shutdown property to true
         * @param {string} [accept] 
         * @param {string} [appNames] (Required) Application name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ShutdownProperlyGet(accept?: string, appNames?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ShutdownProperlyGet(accept, appNames, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ShutdownProperlyApi.v2ShutdownProperlyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ShutdownProperlyApi - factory interface
 * @export
 */
export const V2ShutdownProperlyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ShutdownProperlyApiFp(configuration)
    return {
        /**
         * 
         * @summary Set application or applications shutdown property to true
         * @param {string} [accept] 
         * @param {string} [appNames] (Required) Application name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ShutdownProperlyGet(accept?: string, appNames?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ShutdownProperlyGet(accept, appNames, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ShutdownProperlyApi - object-oriented interface
 * @export
 * @class V2ShutdownProperlyApi
 * @extends {BaseAPI}
 */
export class V2ShutdownProperlyApi extends BaseAPI {
    /**
     * 
     * @summary Set application or applications shutdown property to true
     * @param {string} [accept] 
     * @param {string} [appNames] (Required) Application name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ShutdownProperlyApi
     */
    public v2ShutdownProperlyGet(accept?: string, appNames?: string, options?: RawAxiosRequestConfig) {
        return V2ShutdownProperlyApiFp(this.configuration).v2ShutdownProperlyGet(accept, appNames, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2SslSettingsApi - axios parameter creator
 * @export
 */
export const V2SslSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Changes ssl settings. Sets ssl configuration type. After this method is called, server will be restarted.
         * @param {string} [accept] 
         * @param {string} [domain] (Required) SSL settings
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SslSettingsPost: async (accept?: string, domain?: string, type?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/ssl-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domain !== undefined) {
                localVarQueryParameter['domain'] = domain;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2SslSettingsApi - functional programming interface
 * @export
 */
export const V2SslSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2SslSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Changes ssl settings. Sets ssl configuration type. After this method is called, server will be restarted.
         * @param {string} [accept] 
         * @param {string} [domain] (Required) SSL settings
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SslSettingsPost(accept?: string, domain?: string, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2SslSettingsPost(accept, domain, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2SslSettingsApi.v2SslSettingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2SslSettingsApi - factory interface
 * @export
 */
export const V2SslSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2SslSettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Changes ssl settings. Sets ssl configuration type. After this method is called, server will be restarted.
         * @param {string} [accept] 
         * @param {string} [domain] (Required) SSL settings
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SslSettingsPost(accept?: string, domain?: string, type?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2SslSettingsPost(accept, domain, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2SslSettingsApi - object-oriented interface
 * @export
 * @class V2SslSettingsApi
 * @extends {BaseAPI}
 */
export class V2SslSettingsApi extends BaseAPI {
    /**
     * 
     * @summary Changes ssl settings. Sets ssl configuration type. After this method is called, server will be restarted.
     * @param {string} [accept] 
     * @param {string} [domain] (Required) SSL settings
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2SslSettingsApi
     */
    public v2SslSettingsPost(accept?: string, domain?: string, type?: string, options?: RawAxiosRequestConfig) {
        return V2SslSettingsApiFp(this.configuration).v2SslSettingsPost(accept, domain, type, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2SupportRequestApi - axios parameter creator
 * @export
 */
export const V2SupportRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary send Support Request
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SupportRequestPost: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/support/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2SupportRequestApi - functional programming interface
 * @export
 */
export const V2SupportRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2SupportRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary send Support Request
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SupportRequestPost(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2SupportRequestPost(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2SupportRequestApi.v2SupportRequestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2SupportRequestApi - factory interface
 * @export
 */
export const V2SupportRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2SupportRequestApiFp(configuration)
    return {
        /**
         * 
         * @summary send Support Request
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SupportRequestPost(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2SupportRequestPost(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2SupportRequestApi - object-oriented interface
 * @export
 * @class V2SupportRequestApi
 * @extends {BaseAPI}
 */
export class V2SupportRequestApi extends BaseAPI {
    /**
     * 
     * @summary send Support Request
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2SupportRequestApi
     */
    public v2SupportRequestPost(accept?: string, options?: RawAxiosRequestConfig) {
        return V2SupportRequestApiFp(this.configuration).v2SupportRequestPost(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2SystemMemoryStatusApi - axios parameter creator
 * @export
 */
export const V2SystemMemoryStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets system memory status. Returns Virtual, total physical, available physical, currently in use, total swap space, available swap space and in use swap space. 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SystemMemoryStatusGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/system-memory-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2SystemMemoryStatusApi - functional programming interface
 * @export
 */
export const V2SystemMemoryStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2SystemMemoryStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets system memory status. Returns Virtual, total physical, available physical, currently in use, total swap space, available swap space and in use swap space. 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SystemMemoryStatusGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2SystemMemoryStatusGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2SystemMemoryStatusApi.v2SystemMemoryStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2SystemMemoryStatusApi - factory interface
 * @export
 */
export const V2SystemMemoryStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2SystemMemoryStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets system memory status. Returns Virtual, total physical, available physical, currently in use, total swap space, available swap space and in use swap space. 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SystemMemoryStatusGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2SystemMemoryStatusGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2SystemMemoryStatusApi - object-oriented interface
 * @export
 * @class V2SystemMemoryStatusApi
 * @extends {BaseAPI}
 */
export class V2SystemMemoryStatusApi extends BaseAPI {
    /**
     * 
     * @summary Gets system memory status. Returns Virtual, total physical, available physical, currently in use, total swap space, available swap space and in use swap space. 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2SystemMemoryStatusApi
     */
    public v2SystemMemoryStatusGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2SystemMemoryStatusApiFp(this.configuration).v2SystemMemoryStatusGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2SystemResourcesApi - axios parameter creator
 * @export
 */
export const V2SystemResourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets system resource information. Returns number of total live streams, cpu usage, system information, jvm information, file system information, license status, gpu status etc. Basically returns most of the information in one package.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SystemResourcesGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/system-resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2SystemResourcesApi - functional programming interface
 * @export
 */
export const V2SystemResourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2SystemResourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets system resource information. Returns number of total live streams, cpu usage, system information, jvm information, file system information, license status, gpu status etc. Basically returns most of the information in one package.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SystemResourcesGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2SystemResourcesGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2SystemResourcesApi.v2SystemResourcesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2SystemResourcesApi - factory interface
 * @export
 */
export const V2SystemResourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2SystemResourcesApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets system resource information. Returns number of total live streams, cpu usage, system information, jvm information, file system information, license status, gpu status etc. Basically returns most of the information in one package.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SystemResourcesGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2SystemResourcesGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2SystemResourcesApi - object-oriented interface
 * @export
 * @class V2SystemResourcesApi
 * @extends {BaseAPI}
 */
export class V2SystemResourcesApi extends BaseAPI {
    /**
     * 
     * @summary Gets system resource information. Returns number of total live streams, cpu usage, system information, jvm information, file system information, license status, gpu status etc. Basically returns most of the information in one package.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2SystemResourcesApi
     */
    public v2SystemResourcesGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2SystemResourcesApiFp(this.configuration).v2SystemResourcesGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2SystemStatusApi - axios parameter creator
 * @export
 */
export const V2SystemStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns system information which includes many information such as JVM memory, OS information, Available File Space, Physical memory informations in detail.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SystemStatusGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/system-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2SystemStatusApi - functional programming interface
 * @export
 */
export const V2SystemStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2SystemStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns system information which includes many information such as JVM memory, OS information, Available File Space, Physical memory informations in detail.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SystemStatusGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2SystemStatusGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2SystemStatusApi.v2SystemStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2SystemStatusApi - factory interface
 * @export
 */
export const V2SystemStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2SystemStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns system information which includes many information such as JVM memory, OS information, Available File Space, Physical memory informations in detail.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SystemStatusGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2SystemStatusGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2SystemStatusApi - object-oriented interface
 * @export
 * @class V2SystemStatusApi
 * @extends {BaseAPI}
 */
export class V2SystemStatusApi extends BaseAPI {
    /**
     * 
     * @summary Returns system information which includes many information such as JVM memory, OS information, Available File Space, Physical memory informations in detail.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2SystemStatusApi
     */
    public v2SystemStatusGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2SystemStatusApiFp(this.configuration).v2SystemStatusGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ThreadDumpApi - axios parameter creator
 * @export
 */
export const V2ThreadDumpApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets thread dump in json format. Includes very detailed information such as thread name, thread id, blocked time of thread, thread state and many more information are returned.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ThreadDumpGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/thread-dump`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ThreadDumpApi - functional programming interface
 * @export
 */
export const V2ThreadDumpApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ThreadDumpApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets thread dump in json format. Includes very detailed information such as thread name, thread id, blocked time of thread, thread state and many more information are returned.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ThreadDumpGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ThreadDumpGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ThreadDumpApi.v2ThreadDumpGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ThreadDumpApi - factory interface
 * @export
 */
export const V2ThreadDumpApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ThreadDumpApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets thread dump in json format. Includes very detailed information such as thread name, thread id, blocked time of thread, thread state and many more information are returned.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ThreadDumpGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ThreadDumpGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ThreadDumpApi - object-oriented interface
 * @export
 * @class V2ThreadDumpApi
 * @extends {BaseAPI}
 */
export class V2ThreadDumpApi extends BaseAPI {
    /**
     * 
     * @summary Gets thread dump in json format. Includes very detailed information such as thread name, thread id, blocked time of thread, thread state and many more information are returned.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ThreadDumpApi
     */
    public v2ThreadDumpGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2ThreadDumpApiFp(this.configuration).v2ThreadDumpGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2ThreadsApi - axios parameter creator
 * @export
 */
export const V2ThreadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns processor\'s thread information. Includes number of dead locked threads, thread count, and thread peek count.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ThreadsGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/threads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2ThreadsApi - functional programming interface
 * @export
 */
export const V2ThreadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2ThreadsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns processor\'s thread information. Includes number of dead locked threads, thread count, and thread peek count.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2ThreadsGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2ThreadsGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2ThreadsApi.v2ThreadsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2ThreadsApi - factory interface
 * @export
 */
export const V2ThreadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2ThreadsApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns processor\'s thread information. Includes number of dead locked threads, thread count, and thread peek count.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2ThreadsGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2ThreadsGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2ThreadsApi - object-oriented interface
 * @export
 * @class V2ThreadsApi
 * @extends {BaseAPI}
 */
export class V2ThreadsApi extends BaseAPI {
    /**
     * 
     * @summary Returns processor\'s thread information. Includes number of dead locked threads, thread count, and thread peek count.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2ThreadsApi
     */
    public v2ThreadsGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2ThreadsApiFp(this.configuration).v2ThreadsGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2UserListApi - axios parameter creator
 * @export
 */
export const V2UserListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns user list in the server management panel
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UserListGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/user-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2UserListApi - functional programming interface
 * @export
 */
export const V2UserListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2UserListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns user list in the server management panel
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2UserListGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2UserListGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2UserListApi.v2UserListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2UserListApi - factory interface
 * @export
 */
export const V2UserListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2UserListApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns user list in the server management panel
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UserListGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2UserListGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2UserListApi - object-oriented interface
 * @export
 * @class V2UserListApi
 * @extends {BaseAPI}
 */
export class V2UserListApi extends BaseAPI {
    /**
     * 
     * @summary Returns user list in the server management panel
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2UserListApi
     */
    public v2UserListGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2UserListApiFp(this.configuration).v2UserListGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2UsersApi - axios parameter creator
 * @export
 */
export const V2UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new user. If user object is null or if user is not authenticated, new user won\'t be created.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersPost: async (contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit the user in the server management panel\'s user list. It can change password or user type(admin, read only) 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersPut: async (contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2UsersApi - functional programming interface
 * @export
 */
export const V2UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new user. If user object is null or if user is not authenticated, new user won\'t be created.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2UsersPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2UsersPost(contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2UsersApi.v2UsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit the user in the server management panel\'s user list. It can change password or user type(admin, read only) 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2UsersPut(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2UsersPut(contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2UsersApi.v2UsersPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2UsersApi - factory interface
 * @export
 */
export const V2UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new user. If user object is null or if user is not authenticated, new user won\'t be created.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2UsersPost(contentType, accept, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit the user in the server management panel\'s user list. It can change password or user type(admin, read only) 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersPut(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2UsersPut(contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2UsersApi - object-oriented interface
 * @export
 * @class V2UsersApi
 * @extends {BaseAPI}
 */
export class V2UsersApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new user. If user object is null or if user is not authenticated, new user won\'t be created.
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2UsersApi
     */
    public v2UsersPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2UsersApiFp(this.configuration).v2UsersPost(contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit the user in the server management panel\'s user list. It can change password or user type(admin, read only) 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2UsersApi
     */
    public v2UsersPut(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2UsersApiFp(this.configuration).v2UsersPut(contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2UsersAuthenticateApi - axios parameter creator
 * @export
 */
export const V2UsersAuthenticateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticates user with given username and password. Requires user object to authenticate.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersAuthenticatePost: async (contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/users/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2UsersAuthenticateApi - functional programming interface
 * @export
 */
export const V2UsersAuthenticateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2UsersAuthenticateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authenticates user with given username and password. Requires user object to authenticate.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2UsersAuthenticatePost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2UsersAuthenticatePost(contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2UsersAuthenticateApi.v2UsersAuthenticatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2UsersAuthenticateApi - factory interface
 * @export
 */
export const V2UsersAuthenticateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2UsersAuthenticateApiFp(configuration)
    return {
        /**
         * 
         * @summary Authenticates user with given username and password. Requires user object to authenticate.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersAuthenticatePost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2UsersAuthenticatePost(contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2UsersAuthenticateApi - object-oriented interface
 * @export
 * @class V2UsersAuthenticateApi
 * @extends {BaseAPI}
 */
export class V2UsersAuthenticateApi extends BaseAPI {
    /**
     * 
     * @summary Authenticates user with given username and password. Requires user object to authenticate.
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2UsersAuthenticateApi
     */
    public v2UsersAuthenticatePost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2UsersAuthenticateApiFp(this.configuration).v2UsersAuthenticatePost(contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2UsersInitialApi - axios parameter creator
 * @export
 */
export const V2UsersInitialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates initial user. This is a one time scenario when initial user creation required and shouldn\'t be used otherwise. User object is required and can\'t be null
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersInitialPost: async (contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/users/initial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2UsersInitialApi - functional programming interface
 * @export
 */
export const V2UsersInitialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2UsersInitialApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates initial user. This is a one time scenario when initial user creation required and shouldn\'t be used otherwise. User object is required and can\'t be null
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2UsersInitialPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2UsersInitialPost(contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2UsersInitialApi.v2UsersInitialPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2UsersInitialApi - factory interface
 * @export
 */
export const V2UsersInitialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2UsersInitialApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates initial user. This is a one time scenario when initial user creation required and shouldn\'t be used otherwise. User object is required and can\'t be null
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersInitialPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2UsersInitialPost(contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2UsersInitialApi - object-oriented interface
 * @export
 * @class V2UsersInitialApi
 * @extends {BaseAPI}
 */
export class V2UsersInitialApi extends BaseAPI {
    /**
     * 
     * @summary Creates initial user. This is a one time scenario when initial user creation required and shouldn\'t be used otherwise. User object is required and can\'t be null
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2UsersInitialApi
     */
    public v2UsersInitialPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2UsersInitialApiFp(this.configuration).v2UsersInitialPost(contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2UsersPasswordApi - axios parameter creator
 * @export
 */
export const V2UsersPasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Changes the given user\'s password.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersPasswordPost: async (contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/users/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2UsersPasswordApi - functional programming interface
 * @export
 */
export const V2UsersPasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2UsersPasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Changes the given user\'s password.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2UsersPasswordPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2UsersPasswordPost(contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2UsersPasswordApi.v2UsersPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2UsersPasswordApi - factory interface
 * @export
 */
export const V2UsersPasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2UsersPasswordApiFp(configuration)
    return {
        /**
         * 
         * @summary Changes the given user\'s password.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersPasswordPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2UsersPasswordPost(contentType, accept, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2UsersPasswordApi - object-oriented interface
 * @export
 * @class V2UsersPasswordApi
 * @extends {BaseAPI}
 */
export class V2UsersPasswordApi extends BaseAPI {
    /**
     * 
     * @summary Changes the given user\'s password.
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2UsersPasswordApi
     */
    public v2UsersPasswordPost(contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig) {
        return V2UsersPasswordApiFp(this.configuration).v2UsersPasswordPost(contentType, accept, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2UsersUsermailBlockedApi - axios parameter creator
 * @export
 */
export const V2UsersUsermailBlockedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns if user is blocked. User is blocked for a specific time if there are login attempts
         * @param {string} usermail 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersUsermailBlockedGet: async (usermail: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usermail' is not null or undefined
            assertParamExists('v2UsersUsermailBlockedGet', 'usermail', usermail)
            const localVarPath = `/v2/users/{usermail}/blocked`
                .replace(`{${"usermail"}}`, encodeURIComponent(String(usermail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2UsersUsermailBlockedApi - functional programming interface
 * @export
 */
export const V2UsersUsermailBlockedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2UsersUsermailBlockedApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns if user is blocked. User is blocked for a specific time if there are login attempts
         * @param {string} usermail 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2UsersUsermailBlockedGet(usermail: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2UsersUsermailBlockedGet(usermail, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2UsersUsermailBlockedApi.v2UsersUsermailBlockedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2UsersUsermailBlockedApi - factory interface
 * @export
 */
export const V2UsersUsermailBlockedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2UsersUsermailBlockedApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns if user is blocked. User is blocked for a specific time if there are login attempts
         * @param {string} usermail 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersUsermailBlockedGet(usermail: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2UsersUsermailBlockedGet(usermail, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2UsersUsermailBlockedApi - object-oriented interface
 * @export
 * @class V2UsersUsermailBlockedApi
 * @extends {BaseAPI}
 */
export class V2UsersUsermailBlockedApi extends BaseAPI {
    /**
     * 
     * @summary Returns if user is blocked. User is blocked for a specific time if there are login attempts
     * @param {string} usermail 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2UsersUsermailBlockedApi
     */
    public v2UsersUsermailBlockedGet(usermail: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2UsersUsermailBlockedApiFp(this.configuration).v2UsersUsermailBlockedGet(usermail, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2UsersUsernameApi - axios parameter creator
 * @export
 */
export const V2UsersUsernameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete the user from the server management panel\'s user list
         * @param {string} username 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersUsernameDelete: async (username: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('v2UsersUsernameDelete', 'username', username)
            const localVarPath = `/v2/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2UsersUsernameApi - functional programming interface
 * @export
 */
export const V2UsersUsernameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2UsersUsernameApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete the user from the server management panel\'s user list
         * @param {string} username 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2UsersUsernameDelete(username: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2UsersUsernameDelete(username, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2UsersUsernameApi.v2UsersUsernameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2UsersUsernameApi - factory interface
 * @export
 */
export const V2UsersUsernameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2UsersUsernameApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete the user from the server management panel\'s user list
         * @param {string} username 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2UsersUsernameDelete(username: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2UsersUsernameDelete(username, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2UsersUsernameApi - object-oriented interface
 * @export
 * @class V2UsersUsernameApi
 * @extends {BaseAPI}
 */
export class V2UsersUsernameApi extends BaseAPI {
    /**
     * 
     * @summary Delete the user from the server management panel\'s user list
     * @param {string} username 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2UsersUsernameApi
     */
    public v2UsersUsernameDelete(username: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2UsersUsernameApiFp(this.configuration).v2UsersUsernameDelete(username, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2VersionApi - axios parameter creator
 * @export
 */
export const V2VersionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the version of Ant Media Server.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VersionGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2VersionApi - functional programming interface
 * @export
 */
export const V2VersionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2VersionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the version of Ant Media Server.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VersionGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VersionGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VersionApi.v2VersionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2VersionApi - factory interface
 * @export
 */
export const V2VersionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2VersionApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the version of Ant Media Server.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VersionGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VersionGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2VersionApi - object-oriented interface
 * @export
 * @class V2VersionApi
 * @extends {BaseAPI}
 */
export class V2VersionApi extends BaseAPI {
    /**
     * 
     * @summary Returns the version of Ant Media Server.
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VersionApi
     */
    public v2VersionGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2VersionApiFp(this.configuration).v2VersionGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2VodsBulkApi - axios parameter creator
 * @export
 */
export const V2VodsBulkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete bulk VoD Files based on Vod Id
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsBulkDelete: async (contentType?: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/vods/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2VodsBulkApi - functional programming interface
 * @export
 */
export const V2VodsBulkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2VodsBulkApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete bulk VoD Files based on Vod Id
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VodsBulkDelete(contentType?: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VodsBulkDelete(contentType, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VodsBulkApi.v2VodsBulkDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2VodsBulkApi - factory interface
 * @export
 */
export const V2VodsBulkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2VodsBulkApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete bulk VoD Files based on Vod Id
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsBulkDelete(contentType?: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VodsBulkDelete(contentType, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2VodsBulkApi - object-oriented interface
 * @export
 * @class V2VodsBulkApi
 * @extends {BaseAPI}
 */
export class V2VodsBulkApi extends BaseAPI {
    /**
     * 
     * @summary Delete bulk VoD Files based on Vod Id
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VodsBulkApi
     */
    public v2VodsBulkDelete(contentType?: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2VodsBulkApiFp(this.configuration).v2VodsBulkDelete(contentType, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2VodsCountApi - axios parameter creator
 * @export
 */
export const V2VodsCountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the total number of VoDs
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsCountGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/vods/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2VodsCountApi - functional programming interface
 * @export
 */
export const V2VodsCountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2VodsCountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the total number of VoDs
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VodsCountGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VodsCountGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VodsCountApi.v2VodsCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2VodsCountApi - factory interface
 * @export
 */
export const V2VodsCountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2VodsCountApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the total number of VoDs
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsCountGet(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VodsCountGet(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2VodsCountApi - object-oriented interface
 * @export
 * @class V2VodsCountApi
 * @extends {BaseAPI}
 */
export class V2VodsCountApi extends BaseAPI {
    /**
     * 
     * @summary Get the total number of VoDs
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VodsCountApi
     */
    public v2VodsCountGet(accept?: string, options?: RawAxiosRequestConfig) {
        return V2VodsCountApiFp(this.configuration).v2VodsCountGet(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2VodsCountSearchApi - axios parameter creator
 * @export
 */
export const V2VodsCountSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the partial number of VoDs depending on the searched items
         * @param {string} search 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsCountSearchGet: async (search: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('v2VodsCountSearchGet', 'search', search)
            const localVarPath = `/v2/vods/count/{search}`
                .replace(`{${"search"}}`, encodeURIComponent(String(search)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2VodsCountSearchApi - functional programming interface
 * @export
 */
export const V2VodsCountSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2VodsCountSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the partial number of VoDs depending on the searched items
         * @param {string} search 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VodsCountSearchGet(search: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VodsCountSearchGet(search, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VodsCountSearchApi.v2VodsCountSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2VodsCountSearchApi - factory interface
 * @export
 */
export const V2VodsCountSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2VodsCountSearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the partial number of VoDs depending on the searched items
         * @param {string} search 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsCountSearchGet(search: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VodsCountSearchGet(search, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2VodsCountSearchApi - object-oriented interface
 * @export
 * @class V2VodsCountSearchApi
 * @extends {BaseAPI}
 */
export class V2VodsCountSearchApi extends BaseAPI {
    /**
     * 
     * @summary Get the partial number of VoDs depending on the searched items
     * @param {string} search 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VodsCountSearchApi
     */
    public v2VodsCountSearchGet(search: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2VodsCountSearchApiFp(this.configuration).v2VodsCountSearchGet(search, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2VodsCreateApi - axios parameter creator
 * @export
 */
export const V2VodsCreateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Upload external VoD file to Ant Media Server
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [name] (Required) the name of the VoD File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsCreatePost: async (contentType?: string, accept?: string, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/vods/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2VodsCreateApi - functional programming interface
 * @export
 */
export const V2VodsCreateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2VodsCreateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Upload external VoD file to Ant Media Server
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [name] (Required) the name of the VoD File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VodsCreatePost(contentType?: string, accept?: string, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VodsCreatePost(contentType, accept, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VodsCreateApi.v2VodsCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2VodsCreateApi - factory interface
 * @export
 */
export const V2VodsCreateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2VodsCreateApiFp(configuration)
    return {
        /**
         * 
         * @summary Upload external VoD file to Ant Media Server
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [name] (Required) the name of the VoD File
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsCreatePost(contentType?: string, accept?: string, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VodsCreatePost(contentType, accept, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2VodsCreateApi - object-oriented interface
 * @export
 * @class V2VodsCreateApi
 * @extends {BaseAPI}
 */
export class V2VodsCreateApi extends BaseAPI {
    /**
     * 
     * @summary Upload external VoD file to Ant Media Server
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [name] (Required) the name of the VoD File
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VodsCreateApi
     */
    public v2VodsCreatePost(contentType?: string, accept?: string, name?: string, options?: RawAxiosRequestConfig) {
        return V2VodsCreateApiFp(this.configuration).v2VodsCreatePost(contentType, accept, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2VodsDirectoryApi - axios parameter creator
 * @export
 */
export const V2VodsDirectoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Unlinks VoD path from streams directory and delete the database record. It does not delete the files. It only unlinks folder and delete database records
         * @param {string} [accept] 
         * @param {string} [directory] the full path of the directory that imported VoD files will be deleted from database. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsDirectoryDelete: async (accept?: string, directory?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/vods/directory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (directory !== undefined) {
                localVarQueryParameter['directory'] = directory;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import VoD files from a directory and make it streamable.
         * @param {string} [accept] 
         * @param {string} [directory] the full path of the directory that VoD files will be imported to datastore and linked to the streams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsDirectoryPost: async (accept?: string, directory?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/vods/directory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (directory !== undefined) {
                localVarQueryParameter['directory'] = directory;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2VodsDirectoryApi - functional programming interface
 * @export
 */
export const V2VodsDirectoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2VodsDirectoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Unlinks VoD path from streams directory and delete the database record. It does not delete the files. It only unlinks folder and delete database records
         * @param {string} [accept] 
         * @param {string} [directory] the full path of the directory that imported VoD files will be deleted from database. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VodsDirectoryDelete(accept?: string, directory?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VodsDirectoryDelete(accept, directory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VodsDirectoryApi.v2VodsDirectoryDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Import VoD files from a directory and make it streamable.
         * @param {string} [accept] 
         * @param {string} [directory] the full path of the directory that VoD files will be imported to datastore and linked to the streams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VodsDirectoryPost(accept?: string, directory?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VodsDirectoryPost(accept, directory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VodsDirectoryApi.v2VodsDirectoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2VodsDirectoryApi - factory interface
 * @export
 */
export const V2VodsDirectoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2VodsDirectoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Unlinks VoD path from streams directory and delete the database record. It does not delete the files. It only unlinks folder and delete database records
         * @param {string} [accept] 
         * @param {string} [directory] the full path of the directory that imported VoD files will be deleted from database. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsDirectoryDelete(accept?: string, directory?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VodsDirectoryDelete(accept, directory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import VoD files from a directory and make it streamable.
         * @param {string} [accept] 
         * @param {string} [directory] the full path of the directory that VoD files will be imported to datastore and linked to the streams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsDirectoryPost(accept?: string, directory?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VodsDirectoryPost(accept, directory, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2VodsDirectoryApi - object-oriented interface
 * @export
 * @class V2VodsDirectoryApi
 * @extends {BaseAPI}
 */
export class V2VodsDirectoryApi extends BaseAPI {
    /**
     * 
     * @summary Unlinks VoD path from streams directory and delete the database record. It does not delete the files. It only unlinks folder and delete database records
     * @param {string} [accept] 
     * @param {string} [directory] the full path of the directory that imported VoD files will be deleted from database. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VodsDirectoryApi
     */
    public v2VodsDirectoryDelete(accept?: string, directory?: string, options?: RawAxiosRequestConfig) {
        return V2VodsDirectoryApiFp(this.configuration).v2VodsDirectoryDelete(accept, directory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import VoD files from a directory and make it streamable.
     * @param {string} [accept] 
     * @param {string} [directory] the full path of the directory that VoD files will be imported to datastore and linked to the streams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VodsDirectoryApi
     */
    public v2VodsDirectoryPost(accept?: string, directory?: string, options?: RawAxiosRequestConfig) {
        return V2VodsDirectoryApiFp(this.configuration).v2VodsDirectoryPost(accept, directory, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2VodsIdApi - axios parameter creator
 * @export
 */
export const V2VodsIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete specific VoD File
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsIdDelete: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2VodsIdDelete', 'id', id)
            const localVarPath = `/v2/vods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary VoD file from database
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsIdGet: async (id: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v2VodsIdGet', 'id', id)
            const localVarPath = `/v2/vods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2VodsIdApi - functional programming interface
 * @export
 */
export const V2VodsIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2VodsIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete specific VoD File
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VodsIdDelete(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VodsIdDelete(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VodsIdApi.v2VodsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary VoD file from database
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VodsIdGet(id: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VodsIdGet(id, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VodsIdApi.v2VodsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2VodsIdApi - factory interface
 * @export
 */
export const V2VodsIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2VodsIdApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete specific VoD File
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsIdDelete(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VodsIdDelete(id, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary VoD file from database
         * @param {string} id 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsIdGet(id: string, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VodsIdGet(id, accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2VodsIdApi - object-oriented interface
 * @export
 * @class V2VodsIdApi
 * @extends {BaseAPI}
 */
export class V2VodsIdApi extends BaseAPI {
    /**
     * 
     * @summary Delete specific VoD File
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VodsIdApi
     */
    public v2VodsIdDelete(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2VodsIdApiFp(this.configuration).v2VodsIdDelete(id, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary VoD file from database
     * @param {string} id 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VodsIdApi
     */
    public v2VodsIdGet(id: string, accept?: string, options?: RawAxiosRequestConfig) {
        return V2VodsIdApiFp(this.configuration).v2VodsIdGet(id, accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2VodsImportToStalkerApi - axios parameter creator
 * @export
 */
export const V2VodsImportToStalkerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Import VoDs to Stalker Portal
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsImportToStalkerPost: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/vods/import-to-stalker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2VodsImportToStalkerApi - functional programming interface
 * @export
 */
export const V2VodsImportToStalkerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2VodsImportToStalkerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Import VoDs to Stalker Portal
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VodsImportToStalkerPost(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VodsImportToStalkerPost(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VodsImportToStalkerApi.v2VodsImportToStalkerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2VodsImportToStalkerApi - factory interface
 * @export
 */
export const V2VodsImportToStalkerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2VodsImportToStalkerApiFp(configuration)
    return {
        /**
         * 
         * @summary Import VoDs to Stalker Portal
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsImportToStalkerPost(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VodsImportToStalkerPost(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2VodsImportToStalkerApi - object-oriented interface
 * @export
 * @class V2VodsImportToStalkerApi
 * @extends {BaseAPI}
 */
export class V2VodsImportToStalkerApi extends BaseAPI {
    /**
     * 
     * @summary Import VoDs to Stalker Portal
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VodsImportToStalkerApi
     */
    public v2VodsImportToStalkerPost(accept?: string, options?: RawAxiosRequestConfig) {
        return V2VodsImportToStalkerApiFp(this.configuration).v2VodsImportToStalkerPost(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2VodsListOffsetSizeApi - axios parameter creator
 * @export
 */
export const V2VodsListOffsetSizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary  Get the VoD list from database. It returns 50 items at max. You can use offset value to get result page by page 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [sortBy] Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;
         * @param {string} [orderBy] \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descening order
         * @param {string} [streamId] Id of the stream to filter the results by stream id
         * @param {string} [search] Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsListOffsetSizeGet: async (offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, streamId?: string, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('v2VodsListOffsetSizeGet', 'offset', offset)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('v2VodsListOffsetSizeGet', 'size', size)
            const localVarPath = `/v2/vods/list/{offset}/{size}`
                .replace(`{${"offset"}}`, encodeURIComponent(String(offset)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (streamId !== undefined) {
                localVarQueryParameter['streamId'] = streamId;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2VodsListOffsetSizeApi - functional programming interface
 * @export
 */
export const V2VodsListOffsetSizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2VodsListOffsetSizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary  Get the VoD list from database. It returns 50 items at max. You can use offset value to get result page by page 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [sortBy] Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;
         * @param {string} [orderBy] \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descening order
         * @param {string} [streamId] Id of the stream to filter the results by stream id
         * @param {string} [search] Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VodsListOffsetSizeGet(offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, streamId?: string, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VodsListOffsetSizeGet(offset, size, accept, sortBy, orderBy, streamId, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VodsListOffsetSizeApi.v2VodsListOffsetSizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2VodsListOffsetSizeApi - factory interface
 * @export
 */
export const V2VodsListOffsetSizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2VodsListOffsetSizeApiFp(configuration)
    return {
        /**
         * 
         * @summary  Get the VoD list from database. It returns 50 items at max. You can use offset value to get result page by page 
         * @param {string} offset 
         * @param {string} size 
         * @param {string} [accept] 
         * @param {string} [sortBy] Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;
         * @param {string} [orderBy] \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descening order
         * @param {string} [streamId] Id of the stream to filter the results by stream id
         * @param {string} [search] Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsListOffsetSizeGet(offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, streamId?: string, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VodsListOffsetSizeGet(offset, size, accept, sortBy, orderBy, streamId, search, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2VodsListOffsetSizeApi - object-oriented interface
 * @export
 * @class V2VodsListOffsetSizeApi
 * @extends {BaseAPI}
 */
export class V2VodsListOffsetSizeApi extends BaseAPI {
    /**
     * 
     * @summary  Get the VoD list from database. It returns 50 items at max. You can use offset value to get result page by page 
     * @param {string} offset 
     * @param {string} size 
     * @param {string} [accept] 
     * @param {string} [sortBy] Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;
     * @param {string} [orderBy] \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descening order
     * @param {string} [streamId] Id of the stream to filter the results by stream id
     * @param {string} [search] Search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VodsListOffsetSizeApi
     */
    public v2VodsListOffsetSizeGet(offset: string, size: string, accept?: string, sortBy?: string, orderBy?: string, streamId?: string, search?: string, options?: RawAxiosRequestConfig) {
        return V2VodsListOffsetSizeApiFp(this.configuration).v2VodsListOffsetSizeGet(offset, size, accept, sortBy, orderBy, streamId, search, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V2VodsSynchUserVodListApi - axios parameter creator
 * @export
 */
export const V2VodsSynchUserVodListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Notes here
         * @summary Deprecated. Use import VoDs. Synchronize VoD Folder and add them to VoD database if any file exist and create symbolic links to that folder
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsSynchUserVodListPost: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/vods/synch-user-vod-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2VodsSynchUserVodListApi - functional programming interface
 * @export
 */
export const V2VodsSynchUserVodListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2VodsSynchUserVodListApiAxiosParamCreator(configuration)
    return {
        /**
         * Notes here
         * @summary Deprecated. Use import VoDs. Synchronize VoD Folder and add them to VoD database if any file exist and create symbolic links to that folder
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VodsSynchUserVodListPost(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VodsSynchUserVodListPost(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V2VodsSynchUserVodListApi.v2VodsSynchUserVodListPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V2VodsSynchUserVodListApi - factory interface
 * @export
 */
export const V2VodsSynchUserVodListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2VodsSynchUserVodListApiFp(configuration)
    return {
        /**
         * Notes here
         * @summary Deprecated. Use import VoDs. Synchronize VoD Folder and add them to VoD database if any file exist and create symbolic links to that folder
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VodsSynchUserVodListPost(accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2VodsSynchUserVodListPost(accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V2VodsSynchUserVodListApi - object-oriented interface
 * @export
 * @class V2VodsSynchUserVodListApi
 * @extends {BaseAPI}
 */
export class V2VodsSynchUserVodListApi extends BaseAPI {
    /**
     * Notes here
     * @summary Deprecated. Use import VoDs. Synchronize VoD Folder and add them to VoD database if any file exist and create symbolic links to that folder
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2VodsSynchUserVodListApi
     */
    public v2VodsSynchUserVodListPost(accept?: string, options?: RawAxiosRequestConfig) {
        return V2VodsSynchUserVodListApiFp(this.configuration).v2VodsSynchUserVodListPost(accept, options).then((request) => request(this.axios, this.basePath));
    }
}



